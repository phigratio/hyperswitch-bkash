{
  "openapi": "3.0.4",
  "info": {
    "title": "Frisbii REST API",
    "description": "This document describes the endpoints of the Frisbii REST API. You can find out more about Frisbii <a href='https://frisbii.com/'>here</a>. <br/> <br/><b>Swagger interactive usage / authentication:</b><br />This documentation offers interactive features which will enable you to test how our system behaves. To use the interactive features you have to aquire a bearer token for your active Frisbii sandbox account. This procedure is described <a href='https://docs.frisbii-transform.com/docs/restApi/authentication'>here</a>. OAuth token URL for sandbox is <code>https://sandbox.frisbii-transform.com/oauth/token/</code>, for production <code>https://app.frisbii.com/oauth/token/</code>. Please be aware the URL does not include <code>[...]/api/v1/[...]</code>After aquiring the token you must go through the 'Authorize'-Form down below (green button). You're now able to use the interactive features. <br/>Please be aware your sandbox account will be affected trying out the endpoints!<br/> <br/> <b>Updates to API</b><br />We are constantly improving our API. We are trying to avoid breaking changes as much as possible. However, sometimes we have to make breaking changes. We will inform about breaking changes directly if these endpoints are used by your integration and grant sufficient time to react to the upcoming change. We will also inform about breaking changes in our changelog. Please be aware that we will not inform explicitly about non-breaking changes. We will <b>not inform</b> about changes in the following cases:<br/><ul><li>Adding a new enum value to a published public API endpoint is not considered a breaking change.</li><li>Adding new fields in API endpoint (request and response) is not considered a breaking change.</li></ul>Integrations need to be built in a robust way that can deal with these sorts of changes by handling responses and objects in a generic way and ignoring unexpected types, enum values, fields.</br></br></br></br>Endpoints marked with [FEATURE] is an feature discriminated endpoint. Make sure your account has this feature enabled or contact <a href=\"mailto:support@frisbii-transform.com\">support</a>.</strong>Return to <a href='https://docs.frisbii-transform.com/'>https://docs.frisbii-transform.com/</a>",
    "contact": {
      "email": "support@frisbii-transform.com"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://sandbox.billwerk.com"
    }
  ],
  "paths": {
    "/api/v1/accountingexportfiles/{id}": {
      "get": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Retrieves a Accounting Export File's details by Id",
        "operationId": "AccountingExportFiles_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "AccountingExport Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingExportFileReadDTO"
                },
                "example": {"Id":"68a9a3a1e358906f5b2c06eb","ExportId":"68a9a3a1e358906f5b2c06ec","Version":1,"FileTime":"2025-08-23T13:13:57.7281709+02:00","Status":"Finished","Format":"Datev"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingexportfiles/{fileId}/downloadlink": {
      "post": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Creates a file download token for the given Accounting Export File",
        "operationId": "AccountingExportFiles_CreateDownloadLink_fileId_POST",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "AccountingExport File Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadLinkDTO"
                },
                "example": {"Url":"/Files/1vRmbVt13TyAqfLwXGXjxb","Expiry":"2025-08-24T11:18:57.7345625Z"}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingexportfiles/{fileId}/download": {
      "get": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Direct download of Accounting Export Files",
        "operationId": "AccountingExportFiles_GetDirectDownload_fileId_GET",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "description": "AccountingExport File Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/zip": { }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingexports": {
      "get": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Returns all accounting export requests",
        "operationId": "AccountingExports_Get_kind_includeFiles_from_take_GET",
        "parameters": [
          {
            "name": "kind",
            "in": "query",
            "description": "Accounting export kind",
            "schema": {
              "$ref": "#/components/schemas/AccountingExportKind"
            }
          },
          {
            "name": "includeFiles",
            "in": "query",
            "description": "Include files",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountingExportBatchReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Creates a new accounting export request",
        "operationId": "AccountingExports_Post_dto_POST",
        "requestBody": {
          "description": "Accounting export request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingExportCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingExportRequestReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/accountingexports/{id}": {
      "get": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Get an accounting export request by Id",
        "operationId": "AccountingExports_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Accounting export request Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingExportBatchReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingexportsettings": {
      "get": {
        "tags": [
          "Accounting Exports Settings"
        ],
        "summary": "Retrieves an Accounting Export Settings",
        "operationId": "AccountingExportSettings_GetGeneralSettings__GET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingExportGeneralSettingsReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Accounting Exports Settings"
        ],
        "summary": "Updates an Accounting Export Settings",
        "operationId": "AccountingExportSettings_PutGeneralSettings_generalSettingsDTO_PUT",
        "requestBody": {
          "description": "General Accounting Export Settings DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountingExportGeneralSettingsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingExportGeneralSettingsDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingexportsettings/productbasedaccounts": {
      "get": {
        "tags": [
          "Accounting Exports Settings"
        ],
        "summary": "Retrieves a Product Based Accounting Export Settings",
        "operationId": "AccountingExportSettings_GetProductBasedAccounts__GET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountingExportProductSettingsDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Accounting Exports Settings"
        ],
        "summary": "Updates a Product Based Accounting Export Settings",
        "operationId": "AccountingExportSettings_PatchProductBasedAccounts_accountingExportProductBasedAccountsDTO_allowMissingAccounts_PATCH",
        "parameters": [
          {
            "name": "allowMissingAccounts",
            "in": "query",
            "description": "Allow Missing Accounts",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Accounting Export Product Based Accounts DTO",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AccountingExportProductSettingsDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountingExportProductSettingsDTO"
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/accountingstatus": {
      "get": {
        "tags": [
          "Accounting Exports"
        ],
        "summary": "Retrieves the current status of the Accounting Export",
        "operationId": "AccountingStatus_Get__GET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingStatusDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/components/{id}": {
      "get": {
        "tags": [
          "Components"
        ],
        "summary": "Retrieves a Component details by Id",
        "operationId": "Components_GetItem_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Components"
        ],
        "summary": "Updates a Component",
        "operationId": "Components_Put_id_dto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Component DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentReadDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Components"
        ],
        "summary": "Deletes a Component",
        "operationId": "Components_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/components": {
      "get": {
        "tags": [
          "Components"
        ],
        "summary": "Retrieves a list of Components",
        "operationId": "Components_GetGeneric_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the components are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plangroups/{planGroupId}/components": {
      "post": {
        "tags": [
          "Components"
        ],
        "summary": "Creates a new Component",
        "operationId": "Components_Post_planGroupId_dto_POST",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "path",
            "description": "PlanGroup Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Component DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentReadDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/components/{id}/clone": {
      "post": {
        "tags": [
          "Components"
        ],
        "summary": "Clones a Component",
        "operationId": "Components_PostClone_id_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentReadDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/componentsubscriptions": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves all subscriptions in the selected contract",
        "operationId": "ComponentSubscriptions_GetComponentSubscriptionsByContract_contractId_status_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status the listed subscriptions are filtered by",
            "schema": {
              "$ref": "#/components/schemas/SubscriptionStatus"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aea3","ContractId":"599d51f881b1f00a28f7aea4","CustomerId":"599d51f881b1f00a28f7aea5","ComponentId":"599d51f881b1f00a28f7aea6","Quantity":42,"StartDate":"2025-08-23T11:18:57.8300068Z","BilledUntil":"2025-08-23T11:18:57.8300192Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}},{"Id":"599d51f881b1f00a28f7aea7","ContractId":"599d51f881b1f00a28f7aea8","CustomerId":"599d51f881b1f00a28f7aea9","ComponentId":"599d51f881b1f00a28f7aea0","Quantity":23,"StartDate":"2025-08-23T11:18:57.8300592Z","BilledUntil":"2025-08-23T11:18:57.8300593Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Create a new component subscription for this contract",
        "operationId": "ComponentSubscriptions_Post_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ComponentSubscription DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentSubscriptionCreateDTO"
              },
              "example": {"ComponentId":"599d51f881b1f00a28f7aea3","Quantity":42,"StartDate":"2025-08-23T11:18:57.8327776Z","EndDate":"2025-08-23T11:18:57.8327916Z","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7aea3","ContractId":"599d51f881b1f00a28f7aea4","CustomerId":"599d51f881b1f00a28f7aea5","ComponentId":"599d51f881b1f00a28f7aea6","Quantity":42,"StartDate":"2025-08-23T11:18:57.8355631Z","BilledUntil":"2025-08-23T11:18:57.8355632Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/componentsubscriptions": {
      "get": {
        "tags": [
          "Component Subscriptions"
        ],
        "summary": "Retrieves all subscriptions by contract id, component id or custom field",
        "operationId": "ComponentSubscriptions_GetComponentSubscriptions_contractId_componentId_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "query",
            "description": "Contract Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aea3","ContractId":"599d51f881b1f00a28f7aea4","CustomerId":"599d51f881b1f00a28f7aea5","ComponentId":"599d51f881b1f00a28f7aea6","Quantity":42,"StartDate":"2025-08-23T11:18:57.8379652Z","BilledUntil":"2025-08-23T11:18:57.8379652Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}},{"Id":"599d51f881b1f00a28f7aea7","ContractId":"599d51f881b1f00a28f7aea8","CustomerId":"599d51f881b1f00a28f7aea9","ComponentId":"599d51f881b1f00a28f7aea0","Quantity":23,"StartDate":"2025-08-23T11:18:57.8379704Z","BilledUntil":"2025-08-23T11:18:57.8379704Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/componentsubscriptions/{id}": {
      "get": {
        "tags": [
          "Component Subscriptions"
        ],
        "summary": "Get a single component subscription",
        "operationId": "ComponentSubscriptions_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Subscription Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Component Subscriptions"
        ],
        "summary": "Updates a component subscription",
        "operationId": "ComponentSubscriptions_Put_id_dto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Component Subscription Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ComponentSubscription DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/componentsubscriptions/{componentSubscriptionId}/replace": {
      "post": {
        "tags": [
          "Component Subscriptions"
        ],
        "summary": "Replaces the old component subscription with a new one\n<remarks>\nReplacing a subscription means that the old subscription is ended and a the new one starts on the date specified\n</remarks>",
        "operationId": "ComponentSubscriptions_Replace_componentSubscriptionId_dto_POST",
        "parameters": [
          {
            "name": "componentSubscriptionId",
            "in": "path",
            "description": "Subscription Id which is going to be replaced",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The object containing a set of fields describing a replacement",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentSubscriptionCreateDTO"
              },
              "example": {"ComponentId":"599d51f881b1f00a28f7aea3","Quantity":42,"StartDate":"2025-08-23T11:18:57.8436156Z","EndDate":"2025-08-23T11:18:57.8436158Z","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7aea3","ContractId":"599d51f881b1f00a28f7aea4","CustomerId":"599d51f881b1f00a28f7aea5","ComponentId":"599d51f881b1f00a28f7aea6","Quantity":42,"StartDate":"2025-08-23T11:18:57.8438328Z","BilledUntil":"2025-08-23T11:18:57.8438329Z","Status":"Active","Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"}}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/componentsubscriptions/{componentSubscriptionId}/end": {
      "post": {
        "tags": [
          "Component Subscriptions"
        ],
        "summary": "Ends a component subscription",
        "operationId": "ComponentSubscriptions_End_contractId_componentSubscriptionId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentSubscriptionId",
            "in": "path",
            "description": "Component Subscription Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ComponentSubscription DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ComponentSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/usage": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves a contract's associated usages",
        "operationId": "ComponentUsage_GetUsageByContract_contractId_fromDateTime_untilDateTime_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Date from where on the items are listed",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "untilDateTime",
            "in": "query",
            "description": "Date until the items are listed",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeteredUsageReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:57.8499018Z","BilledOn":"2025-08-23T11:18:57.8499166Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8499838Z"},{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:57.8500092Z","BilledOn":"2025-08-23T11:18:57.8500092Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8500093Z"}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Posts new metered usage data",
        "operationId": "ComponentUsage_Post_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "MeteredUsage object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MeteredUsageDTO"
              },
              "example": {"ComponentId":"599d51f881b1f00a28f7ae9c","Quantity":124.0,"Memo":"MemoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8522600Z"}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeteredUsageReadDTO"
                },
                "example": {"TransferredAt":"0001-01-01T00:00:00.0000000","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8534356Z"}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/usage/{usageId}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves a contract's associated usage by Id",
        "operationId": "ComponentUsage_GetSingleUsageByContract_contractId_usageId_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usageId",
            "in": "path",
            "description": "Usage Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeteredUsageReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Contracts"
        ],
        "summary": "Remove an unbilled metered usage",
        "description": "As long as the usage hasn't been billed yet, you can simply DELETE it. Otherwise, the process becomes ill-defined,\n            especially in light of free quota. You can deduct the overbilled amount in the following month or write a credit note manually.",
        "operationId": "ComponentUsage_Delete_contractId_usageId_DELETE",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "usageId",
            "in": "path",
            "description": "Metered Usage Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/usage": {
      "get": {
        "tags": [
          "Metered Usage"
        ],
        "summary": "Retrieves usages by contract id, component id or custom field",
        "operationId": "ComponentUsage_GetMeteredUsage_contractId_componentId_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "query",
            "description": "Contract Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "query",
            "description": "Component Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeteredUsageReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:57.8587411Z","BilledOn":"2025-08-23T11:18:57.8587411Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8587414Z"},{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:57.8587453Z","BilledOn":"2025-08-23T11:18:57.8587454Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:57.8587455Z"}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contractchanges": {
      "get": {
        "tags": [
          "Contract changes"
        ],
        "summary": "Retrieve a list of contract changes",
        "description": "Usage with contractId parameter is recommended.",
        "operationId": "ContractChanges_GetList_contractId_dateFrom_dateTo_from_take_includeContract_includePauses_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "query",
            "description": "Concatenate to URL to limit search to specific contract",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches changes with a occured date equal or younger than the specified date, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches changes with a occured date equal or older than the specified date, inclusive, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (500 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeContract",
            "in": "query",
            "description": "If true - includes contract with phases; false by default",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includePauses",
            "in": "query",
            "description": "If All - includes all pauses in change list; If Changed - includes changed pauses in change list; None by default",
            "schema": {
              "$ref": "#/components/schemas/ContractChangeRequestOption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractChangeDTO"
                  }
                },
                "example": [{"Id":"68a9a3a1e358906f5b2c06ef","Type":"Signup","Timestamp":"2025-08-22T11:18:57.8681129Z","OrderId":"68a9a3a1e358906f5b2c06f1","ContractId":"68a9a3a1e358906f5b2c06ed","ChangeDate":"2025-08-23T11:18:57.8681135Z","NewPlanVariantId":"68a9a3a1e358906f5b2c06f0","NewPlanId":"68a9a3a1e358906f5b2c06ee"},{"Id":"68a9a3a1e358906f5b2c06f2","Type":"Upgrade","Timestamp":"2025-08-23T10:18:57.8681328Z","OrderId":"68a9a3a1e358906f5b2c06f4","ContractId":"68a9a3a1e358906f5b2c06ed","ChangeDate":"2025-09-23T11:18:57.8681331Z","NewPlanVariantId":"68a9a3a1e358906f5b2c06f3","NewPlanId":"68a9a3a1e358906f5b2c06ee"},{"Id":"68a9a3a1e358906f5b2c06f5","Type":"Timebased","Timestamp":"2025-08-23T11:18:57.8681338Z","ContractId":"68a9a3a1e358906f5b2c06ed"},{"Id":"68a9a3a1e358906f5b2c06f6","Type":"EndContract","Trigger":"PaymentEscalation","Timestamp":"2025-08-23T10:18:57.8681742Z","ContractId":"68a9a3a1e358906f5b2c06ed","ChangeDate":"2025-09-23T11:18:57.8681743Z"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contractchanges/{contractChangeId}": {
      "get": {
        "tags": [
          "Contract changes"
        ],
        "summary": "Retrieves a contract change object by Id",
        "operationId": "ContractChanges_GetContractChange_contractChangeId_includeContract_includeComponentSubscriptions_includeDiscountSubscriptions_includePauses_GET",
        "parameters": [
          {
            "name": "contractChangeId",
            "in": "path",
            "description": "Contract change Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeContract",
            "in": "query",
            "description": "If true - includes contract with phases; true by default",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeComponentSubscriptions",
            "in": "query",
            "description": "If All - includes all component subscriptions in change list; If Changed - includes changed component subscriptions in change list; None by default",
            "schema": {
              "$ref": "#/components/schemas/ContractChangeRequestOption"
            }
          },
          {
            "name": "includeDiscountSubscriptions",
            "in": "query",
            "description": "If All - includes all discount subscriptions in change list; If Changed - includes changed discount subscriptions in change list; None by default",
            "schema": {
              "$ref": "#/components/schemas/ContractChangeRequestOption"
            }
          },
          {
            "name": "includePauses",
            "in": "query",
            "description": "If All - includes all pauses in change list; If Changed - includes changed pauses in change list; None by default",
            "schema": {
              "$ref": "#/components/schemas/ContractChangeRequestOption"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractChangeDTO"
                },
                "example": {"Id":"68a9a3a1e358906f5b2c06fe","Type":"Upgrade","Timestamp":"2025-08-23T10:18:57.8710451Z","OrderId":"68a9a3a1e358906f5b2c06ff","ContractId":"68a9a3a1e358906f5b2c06f7","ChangeDate":"2025-09-23T11:18:57.8713157Z","NewPlanVariantId":"68a9a3a1e358906f5b2c06f9","NewPlanId":"68a9a3a1e358906f5b2c06f8","Contract":{"Id":"68a9a3a1e358906f5b2c06f7","Before":{"CurrentPhase":{"Type":"Trial","StartDate":"2025-07-23T11:18:57.8709836Z","PlanVariantId":"68a9a3a1e358906f5b2c06f9","PlanId":"68a9a3a1e358906f5b2c06f8","InheritStartDate":false},"Phases":[{"Type":"Trial","StartDate":"2025-07-23T11:18:57.8709836Z","PlanVariantId":"68a9a3a1e358906f5b2c06f9","PlanId":"68a9a3a1e358906f5b2c06f8","InheritStartDate":false}],"CurrentPause":{"StartDate":"2025-08-24T11:18:57.8710063Z","EndDate":"2025-08-25T11:18:57.8710275Z"}},"After":{"CurrentPhase":{"Type":"Normal","StartDate":"2025-09-23T11:18:57.8709840Z","PlanVariantId":"68a9a3a1e358906f5b2c06f9","PlanId":"68a9a3a1e358906f5b2c06f8","InheritStartDate":false},"Phases":[{"Type":"Trial","StartDate":"2025-07-23T11:18:57.8709836Z","PlanVariantId":"68a9a3a1e358906f5b2c06f9","PlanId":"68a9a3a1e358906f5b2c06f8","InheritStartDate":false},{"Type":"Normal","StartDate":"2025-09-23T11:18:57.8709840Z","PlanVariantId":"68a9a3a1e358906f5b2c06f9","PlanId":"68a9a3a1e358906f5b2c06f8","InheritStartDate":false}],"CurrentPause":{"StartDate":"2025-08-23T11:04:57.8710438Z"}}},"ComponentSubscriptions":[{"Id":"68a9a3a1e358906f5b2c06fa","Before":{"Id":"68a9a3a1e358906f5b2c06fa","Quantity":4,"StartDate":"2025-08-23T11:18:57.8710953Z","Status":"Inactive"},"After":{"Id":"68a9a3a1e358906f5b2c06fa","Quantity":4,"StartDate":"2025-08-23T11:18:57.8710953Z","EndDate":"2025-09-02T11:18:57.8717746Z","Status":"Inactive"}},{"Id":"68a9a3a1e358906f5b2c06fb","Before":{"Id":"68a9a3a1e358906f5b2c06fb","Quantity":2,"StartDate":"2025-08-24T11:18:57.8711271Z","EndDate":"2025-08-28T11:18:57.8711272Z","Status":"Inactive"},"After":{"Id":"68a9a3a1e358906f5b2c06fb","Quantity":2,"StartDate":"2025-08-24T11:18:57.8711271Z","EndDate":"2025-08-29T11:18:57.8711272Z","Status":"Inactive"}}],"DiscountSubscriptions":[{"Id":"68a9a3a1e358906f5b2c06fa","Before":{"Id":"68a9a3a1e358906f5b2c06fc","StartDate":"2025-08-23T11:18:57.8711766Z","Status":"Inactive"},"After":{"Id":"68a9a3a1e358906f5b2c06fc","StartDate":"2025-08-23T11:18:57.8711766Z","EndDate":"2025-09-02T11:18:57.8723275Z","Status":"Inactive"}}],"Pauses":[{"Id":"68a9a3a1e358906f5b2c06fd","Before":{"Id":"68a9a3a1e358906f5b2c06fd","StartDate":"2025-08-24T11:18:57.8710063Z","EndDate":"2025-08-25T11:18:57.8710275Z"},"After":{"Id":"68a9a3a1e358906f5b2c06fd","StartDate":"2025-08-23T11:04:57.8710438Z"}}]}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{id}": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves a single contract by Id",
        "operationId": "Contracts_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:57.8875790Z","NextBillingDate":"2025-08-23T11:18:57.8875791Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8875800Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:57.8875805Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8877248Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:57.8878245Z","EndDate":"2025-08-23T11:18:57.8878247Z","BilledUntil":"2025-08-23T11:18:57.8878248Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Contracts"
        ],
        "summary": "Deletes a contract",
        "description": "Terminated contracts can be deleted from the system. Billwerk will ensure that the conditions are met before closing.\nIf some conditions are not met at the time of the request, billwerk stores the request, and will attempt deleting the contract until possible.\nTo ensure compliance with accounting principles, billwerk will archive the data relevant to accounting.\n\n</br> \nNote: For GDPR personal data deletion request, DELETE /customers/{id} is also available and will ensure all contracts are deleted.",
        "operationId": "Contracts_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "200": {
            "description": "OK"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve a list of contracts",
        "operationId": "Contracts_GetList_from_skip_take_externalSubscriptionId_externalId_CustomFields_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "externalSubscriptionId",
            "in": "query",
            "description": "Filter by external subscription id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter by external id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:57.8958878Z","NextBillingDate":"2025-08-23T11:18:57.8958880Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8958884Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:57.8958889Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"ReferenceCode":"XXXX-YYYY","Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8958898Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:57.8958901Z","EndDate":"2025-08-23T11:18:57.8958901Z","BilledUntil":"2025-08-23T11:18:57.8958902Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"},{"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:57.8958908Z","NextBillingDate":"2025-08-23T11:18:57.8958909Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8958911Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:57.8958930Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"ReferenceCode":"XXXX-ZZZZ","Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8958934Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:57.8958936Z","EndDate":"2025-08-23T11:18:57.8958936Z","BilledUntil":"2025-08-23T11:18:57.8958937Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customers/{customerId}/contracts": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieves a list of all contracts for the given customer Id",
        "operationId": "Contracts_GetContractsByCustomer_customerId_GET",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContractReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:57.8993196Z","NextBillingDate":"2025-08-23T11:18:57.8993197Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8993202Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:57.8993206Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"ReferenceCode":"XXXX-YYYY","Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8993215Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:57.8993217Z","EndDate":"2025-08-23T11:18:57.8993218Z","BilledUntil":"2025-08-23T11:18:57.8993219Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"},{"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:57.8993221Z","NextBillingDate":"2025-08-23T11:18:57.8993222Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8993224Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:57.8993226Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"ReferenceCode":"XXXX-ZZZZ","Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:57.8993230Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:57.8993232Z","EndDate":"2025-08-23T11:18:57.8993232Z","BilledUntil":"2025-08-23T11:18:57.8993233Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{id}/subscriptions": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves all currently active subscriptions including plan variant, component subscriptions and discount subscriptions",
        "operationId": "Contracts_GetSubscriptions_id_timestamp_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "in": "query",
            "description": "This parameter is optional. By default the request will return currently active subscriptions. When passing the timestamp parameter the response will contain active subscription at the specified time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractSubscriptionsDTO"
                },
                "example": {"Id":"68a9a3a1e358906f5b2c0700","Phase":{"Type":"Normal","StartDate":"2025-02-23T11:18:57.9024842Z","PlanVariantId":"5b20d2df81b1f00d1425280f","PlanId":"5b20d2deba5c1e13409b15f2","Quantity":1,"InheritStartDate":false},"ComponentSubscriptions":[{"Id":"599d51f881b1f00a28f7ae9n","ContractId":"599d51f881b1f00a28f7ae14","CustomerId":"599d51f881b1f00a28f7asdf","ComponentId":"599d51f881b1f00a28f7ae10","Quantity":1,"StartDate":"2025-07-23T11:18:57.9024778Z","BilledUntil":"2025-09-23T11:18:57.9024772Z","Status":"Active","EndDate":"2026-02-23T11:18:57.9024776Z","Memo":"Memoexample"},{"Id":"599d51f881b1f00a28f7ae8n","ContractId":"599d51f881b1f00a28f7ae14","CustomerId":"599d51f881b1f00a28f7asdf","ComponentId":"599d51f881b1f00a28f7ae11","Quantity":0,"StartDate":"2025-07-23T11:18:57.9024788Z","BilledUntil":"2025-09-23T11:18:57.9024786Z","Status":"Active","EndDate":"2026-02-23T11:18:57.9024787Z","Memo":"Memoexample"}],"DiscountSubscriptions":[{"Id":"599d51f881b1f00a28f7ae2m","ContractId":"599d51f881b1f00a28f7ae14","CouponCode":"50off","CouponId":"599d51f881b1f00a28f7ae16","DiscountId":"599d51f881b1f00a28f7ae18","StartDate":"2025-08-23T11:18:57.9024799Z","Status":"Active","EndDate":"2026-02-23T11:18:57.9024796Z"},{"Id":"599d51f881b1f00a28f7ae2o","ContractId":"599d51f881b1f00a28f7ae14","CouponCode":"starter","CouponId":"599d51f881b1f00a28f7ae17","DiscountId":"599d51f881b1f00a28f7ae20","StartDate":"2025-08-23T11:18:57.9024820Z","Status":"Active","EndDate":"2025-09-23T11:18:57.9024801Z"}]}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{id}/prepaidcards": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves redeemed prepaid cards information for a specific contract",
        "operationId": "Contracts_GetPrepaidCards_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidCardsListReadDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{id}/previewnextrecurring": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve the expected amount of the next billing / invoice",
        "operationId": "Contracts_GetNextRecurringInfos_id_ignoreZeroTotals_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreZeroTotals",
            "in": "query",
            "description": "Flag to ignore 0 totals",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NextRecurringInfosDTO"
                },
                "example": {"BillingDate":"2025-09-23T11:18:57.9087784Z","TotalNet":25.00,"TotalVat":4.75,"TotalGross":29.75,"Currency":"EUR","AmountPayable":29.75}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/move": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Moves a contract to a different customer",
        "description": "This endpoint is currently in beta and may change in the future.\nUsing this endpoint can lead to interruptions in the billing process.",
        "operationId": "Contracts_Move_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Contract move DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractMoveDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{id}/billingsuspended": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Switches Automatic Billing for a contract on or off",
        "operationId": "Contracts_PutBillingSuspended_id_status_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Automatic Billing status: true is on, false is off",
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/selfservicetoken": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieve a short-lived Self-Service access token",
        "description": "The token can be used by your customers to change their account and payment information for the given contract.\nRetrieve the token immediately before redirecting the customer.",
        "operationId": "Contracts_GetSelfServiceToken_contractId_tokenValidity_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenValidity",
            "in": "query",
            "description": "Token validity, limited up to 10080 minutes (or 7 days)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SelfServiceTokenDTO"
                },
                "example": {"Expiry":"2025-08-23T11:18:57.9146395Z","Token":"ExampleToken","Purpose":"ExamplePurpose","Url":"ExampleURL"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/trialend": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Change the contract's trial end",
        "description": "**Usage Advisory:**\n- This endpoint is limited in scope: it does not affect the start dates of component subscriptions, metered usages, or discounts.\n- Effective only when there are no phase changes post-trial end.\n- Given the evolving nature of our features, there may be additional, unforeseen limitations.\n- It exclusively modifies the trial phase; exercise caution with complex contracts involving components and discounts.\n            \nPlease use this endpoint judiciously to ensure it aligns with your specific contract structures and requirements.",
        "operationId": "Contracts_PutTrialEnd_contractId_dto_PUT",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "DTO with new trial end date",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetTrialEndDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/customfields": {
      "put": {
        "tags": [
          "Contracts"
        ],
        "summary": "Set a new list of custom fields in the contract and replace/remove existing ones",
        "operationId": "Contracts_PutCustomFields_contractId_customFieldsDTO_PUT",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CustomFieldsDTO object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {"MyCustomField1":"MyValue1","MyCustomField2":"MyValue2"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Contracts"
        ],
        "summary": "Change/set values of specific custom fields while leaving others untouched",
        "operationId": "Contracts_PatchCustomFields_contractId_customFieldsDTO_PATCH",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "CustomFieldsDTO object",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {"MyCustomField1":"MyValue1","MyCustomField2":"MyChangedValue2","MyCustomField3":"MyChangedValue3"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/continuepayments": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Continue payments for a contract after they were blocked",
        "description": "This endpoint is currently in beta and may change in the future.",
        "operationId": "Contracts_PostContinuePayments_contractId_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentProcessDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/payment": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Capture an external payment/refund for a specific contract",
        "operationId": "Contracts_PostContractPayment_contractId_paymentDto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContractPaymentDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractPaymentDTO"
              },
              "example": {"Amount":5,"Currency":"EUR","Description":"External Payment (positive amount property) Or Refund (negative amount property)","RecurringPaymentsOff":false,"BookingDate":"2025-08-23"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPaymentDTO"
                },
                "example": {"Amount":5,"Currency":"EUR","Description":"External Payment (positive amount property) Or Refund (negative amount property)","RecurringPaymentsOff":false,"BookingDate":"2025-08-23"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/rateditems": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Returns a list of rated items for a contract",
        "operationId": "Contracts_GetRatedItems_contractId_from_skip_take_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RatedItemDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Create a Rated Item for this contract",
        "operationId": "RatedItems_Post_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Rated Item",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatedItemCreateDTO"
              },
              "example": {"Description":"I'm a RatedItem","Quantity":1,"PricePerUnit":300,"TaxPolicyId":"5a32417d64e06b4fa00f80dc","PeriodStart":"2025-08-23T11:18:57.9374901Z","PeriodEnd":"2025-09-23T11:18:57.9375034Z"}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatedItemDTO"
                },
                "example": {"Id":"5afbdc8664e06d4afc30b8e5","Description":"I'm a RatedItem","Quantity":1,"PricePerUnit":300,"TaxPolicyId":"5a32417d64e06b4fa00f80dc","PeriodStart":"2025-08-23T11:18:57.9389923Z","PeriodEnd":"2025-09-23T11:18:57.9390031Z","TransferredAt":"2025-08-23T11:18:57.9390130Z","TotalNet":0,"TotalVat":0,"TotalGross":0}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/resetpaymentescalation": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Resets Escalation for a contract",
        "operationId": "Contracts_PostResetPaymentEscalation_contractId_resetParameters_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Reset parameters and comments",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EscalationResetParametersDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EscalationSuspendedDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/cancellationpreview": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves a cancellation preview for a contract",
        "description": "Retrieves a cancellation preview for a contract for a regular cancellation, considering contract and notice periods of the booked PlanVariant.\n            \n</br>\n             Property <strong>EndDate</strong> describes the date at which the contract would be cancelled when doing a regular cancellation.\n             Property <strong>NextPossibleCancellationDate</strong> describes the date until which the contract can be cancelled using a regular cancellation achieving the next possible end date of the contract while adhering to the contract and notice periods configured.",
        "operationId": "Contracts_GetCancellationPreview_contractId_cancellationTime_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cancellationTime",
            "in": "query",
            "description": "Defines when the contract will be cancelled",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationOutputDTO"
                },
                "example": {"NextPossibleCancellationDate":"2025-10-23T11:18:57.9471099Z","EndDate":"2025-10-23T11:18:57.9468692Z","Invoice":{"PriceTaxType":"Net","TotalGross":0,"TotalNet":0,"TotalVat":0,"Entries":[{"ReverseCharge":false,"TotalGross":0,"TotalNet":0,"TotalVat":0}],"RecipientName":"Marcellus Wallace","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"US"},"CustomerId":"5b60696081b1f014908fc5d2","ContractId":"5b60696081b1f014908fc5d0"},"ContractAfter":{"Id":"5b60696081b1f014908fc5d0","LastBillingDate":"2025-07-23T11:18:57.9470890Z","NextBillingDate":"2025-09-23T11:18:57.9470892Z","PlanId":"5b20d2de81b1f00d14252807","CustomerId":"5b60696081b1f014908fc5d2","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-06-23T11:18:57.9470899Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67","PlanId":"5b20d2de81b1f00d14252807","Quantity":1,"InheritStartDate":false},{"Type":"Inactive","StartDate":"2025-10-23T11:18:57.9470904Z","InheritStartDate":false}],"Balance":123,"ReferenceCode":"TBKG-STDJ","Currency":"EUR","PlanGroupId":"5b20d2ddba5c1e10d05c5830","PaymentProvider":"InvoicePayment","PaymentProviderRole":"BlackLabel","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-06-23T11:18:57.9470912Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67","PlanId":"5b20d2de81b1f00d14252807","Quantity":1,"InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-06-23T11:18:57.9470916Z","EndDate":"2025-10-23T11:18:57.9470917Z","BilledUntil":"2025-09-23T11:18:57.9470918Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67"}}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pausepreview": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves a pause preview for a contract",
        "operationId": "Contracts_PostPausePreview_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContractPauseDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractPauseCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPauseOutputDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/end": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Set an end date for this contract",
        "operationId": "Contracts_PostContractEnd_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContractEndDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractEndDTO"
              },
              "example": {"EndDate":"2025-10-23T11:18:57.9579072Z"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationOutputDTO"
                },
                "example": {"EndDate":"2025-10-23T11:18:57.9584545Z","Invoice":{"PriceTaxType":"Net","TotalGross":0,"TotalNet":0,"TotalVat":0,"Entries":[{"ReverseCharge":false,"TotalGross":0,"TotalNet":0,"TotalVat":0}],"RecipientName":"Marcellus Wallace","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"US"},"CustomerId":"5b60696081b1f014908fc5d2","ContractId":"5b60696081b1f014908fc5d0"},"ContractAfter":{"Id":"5b60696081b1f014908fc5d0","LastBillingDate":"2025-07-23T11:18:57.9584560Z","NextBillingDate":"2025-09-23T11:18:57.9584562Z","PlanId":"5b20d2de81b1f00d14252807","CustomerId":"5b60696081b1f014908fc5d2","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-06-23T11:18:57.9584569Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67","PlanId":"5b20d2de81b1f00d14252807","Quantity":1,"InheritStartDate":false},{"Type":"Inactive","StartDate":"2025-10-23T11:18:57.9584572Z","InheritStartDate":false}],"Balance":123,"ReferenceCode":"TBKG-STDJ","Currency":"EUR","PlanGroupId":"5b20d2ddba5c1e10d05c5830","PaymentProvider":"InvoicePayment","PaymentProviderRole":"BlackLabel","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-06-23T11:18:57.9584579Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67","PlanId":"5b20d2de81b1f00d14252807","Quantity":1,"InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-06-23T11:18:57.9584583Z","EndDate":"2025-10-23T11:18:57.9584584Z","BilledUntil":"2025-09-23T11:18:57.9584585Z","PlanVariantId":"5b503c50ba5c1e1a949c6a67"}}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/annulate": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Annul a specific contract",
        "operationId": "Contracts_AnnulateContract_contractId_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/refund": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Initiate a refund for a specific contract",
        "operationId": "Contracts_PostRefund_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Refund",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractRefundDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractRefundResultDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/changepaymentmethod": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Change payment method for a contract",
        "description": "You can select whether the customer pays \"On Account\" or whether no payment data is stored for this contract by choosing \"Without Payment Data\" (selectedPaymentMethod  : \"None:None\")\nWith the payment provider Payone, you also have the option of storing or changing the debit memo data for your customers.\nIf your customer wants to pay via Paypal, credit card or direct debit, you can make the self-service customer portal available to him, in which he can enter his payment data.\nYou can find an explanation of the customer portal [here](https://support.frisbii.com/hc/en-us/articles/115001966609-Wie-kann-ich-die-gehostete-Bestellseite-und-das-Kundenportal-verwenden-).",
        "operationId": "Contracts_PostChangePaymentMethod_contractId_paymentData_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "New Payment Data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractChangePaymentMethodDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/bill": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Execute interim billing for a specific contract",
        "operationId": "Contracts_PostBill_contractId_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/pause": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Pauses a contract",
        "operationId": "Contracts_PostContractPause_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContractPauseDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractPauseCreateDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPauseOutputDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/resume": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Resume a contract",
        "operationId": "Contracts_PostContractResume_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "ContractResumeDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractResumeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractPauseOutputDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/productinfo": {
      "get": {
        "tags": [
          "ProductInfo"
        ],
        "summary": "Retrieves product information of products used by a contract",
        "operationId": "Contracts_GetProductInfoForContract_contractId_includeAllNonHidden_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "ID of the contract",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAllNonHidden",
            "in": "query",
            "description": "Include non-hidden products from the same PlanGroup even if they're not used by the contract",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInfoDTO"
                },
                "example": {"PlanGroups":[{"Id":"5a9ff61c81b1f010e02fbe91","Name":{"_c":"Standard"},"Currency":"EUR","TimeGranularity":"Precise","PriceTaxType":"Net","Hidden":false}],"Plans":[{"PlanGroupId":"5a9ff61c81b1f010e02fbe91","Id":"5a9ff61c81b1f010e02fbe93","Name":{"_c":"My Product - Advanced","de":"Mein Produkt - Advanced"},"SetupDescription":{"_c":"Setup fee","de":"Einrichtungsgeb�hr"},"PlanDescription":{"_c":"all basic features plus feature deluxe included","de":"enth�lt alle basic-Funktionen plus das Feature Deluxe"},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5996a944ba5c2e08203e8f52","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false,"CustomFields":{}},{"PlanGroupId":"5a9ff61c81b1f010e02fbe91","Id":"5a9ff61bba5c1e154c958d11","Name":{"_c":"My Product - Basic","de":"Mein Produkt - Basic"},"SetupDescription":{"_c":"Setup fee","de":"Einrichtungsgeb�hr"},"PlanDescription":{"_c":"all basic features are included","de":"enth�lt alle basic-Funktionen"},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5996a944ba5c2e08203e8f55","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false,"CustomFields":{}}],"PlanVariants":[{"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5a9ff61c81b1f010e02fbe93","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"monatliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment","de":"monatliche Laufzeit und monatliche Zahlung"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"},{"Id":"5996a945ba5c2e08203e8f5c","PlanId":"5a9ff61c81b1f010e02fbe93","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":12},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":175,"SetupFee":25,"InternalName":"j�hrliche Laufzeit","Description":{"_c":"yearly renewal and yearly payment","de":"monatliche Laufzeit und monatliche Zahlung"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}],"Components":[],"TaxPolicies":[{"Id":"5981a1e381b1fc126071dc3e","Name":"Services","IsOssApplicable":false,"Entries":[{"Country":"DE","Rate":19,"SplitOnTaxChange":false},{"Country":"EU","Rate":19,"SplitOnTaxChange":false},{"Country":"XX","Rate":0,"SplitOnTaxChange":false}]}],"Discounts":[{"Id":"5a9ff61cba5c1e154c958d17","PlanGroupId":"5a9ff61c81b1f010e02fbe91","InternalName":"Starter discount","Description":{"_c":"Starter discount"},"Duration":{"Unit":"Month","Quantity":3},"DurationType":"FixedPeriod","Effect":{"Type":"Relative","ReductionPercent":30},"Targets":{"5a9ff61cba5c1e154c958d13":true,"5a9ff61c81b1f010e02fbe95":true,"5a9ff61cba5c1e154c958d15":true,"5a9ff61c81b1f010e02fbe97":true},"IncludeSetup":false,"CreateSeparateLineItem":true,"Hidden":false,"IsDeletable":false}],"Coupons":[{"Id":"5a9ff61d81b1f010e02fbe99","PlanGroupId":"5a9ff61c81b1f010e02fbe91","Active":true,"InternalName":"Starter Coupon","Description":{"_c":"Thank you. Enjoy the Starter discount!","de":"Danke. Viel Spa� mit dem Starter-Rabatt!"},"DiscountId":"5a9ff61cba5c1e154c958d17","Enabled":true,"IsSingleUse":false,"Hidden":false}]}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/countrylist": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "Returns a list of countries",
        "operationId": "CountryList_Get_isWhiteList_GET",
        "parameters": [
          {
            "name": "isWhiteList",
            "in": "query",
            "description": "If true, returns only countries that are allowed for the current merchant",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/coupons/{id}": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieves a coupon details by Id",
        "operationId": "Coupons_GetItem_id_includeCodes_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Coupon Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeCodes",
            "in": "query",
            "description": "If true, includes the list of coupon codes. Default: true",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Coupons"
        ],
        "summary": "Updates a coupon",
        "operationId": "Coupons_Put_id_dto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Coupon Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Coupon DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponReadDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Coupons"
        ],
        "summary": "Deletes a coupon",
        "operationId": "Coupons_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Coupon Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/coupons": {
      "get": {
        "tags": [
          "Coupons"
        ],
        "summary": "Retrieves a list of coupons",
        "operationId": "Coupons_GetList_from_couponCode_enabled_active_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "query",
            "description": "Filter by coupon code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by enabled state",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Filter by active state",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CouponReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plangroups/{planGroupId}/coupons": {
      "post": {
        "tags": [
          "Coupons"
        ],
        "summary": "Creates a new coupon for a plan group",
        "operationId": "Coupons_Post_planGroupId_dto_POST",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "path",
            "description": "PlanGroup Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Coupon DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CouponDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CouponReadDTO"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customers/{id}": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a single customer",
        "operationId": "Customers_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReadDTO"
                },
                "example": {"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0078913Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Wallace, Marcellus","CustomerSubName":"","FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","CustomFields":{"CustomFieldName":"CustomFieldValue","Name":"Value"},"DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Customers"
        ],
        "summary": "Updates parts of a customer",
        "operationId": "Customers_Patch_id_requestBody_PATCH",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerReadDTO"
              },
              "example": {"FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.com","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","DefaultBearerMedium":"Email","Hidden":false}
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReadDTO"
                },
                "example": {"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0114709Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Wallace, Marcellus","CustomerSubName":"","FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","CustomFields":{"CustomFieldName":"CustomFieldValue","Name":"Value"},"DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "put": {
        "tags": [
          "Customers"
        ],
        "summary": "Replaces a customer's data",
        "operationId": "Customers_PutItem_id_customerDto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Customer object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDTO"
              },
              "example": {"FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.com","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","DefaultBearerMedium":"Email","Hidden":false}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReadDTO"
                },
                "example": {"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0174462Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Wallace, Marcellus","CustomerSubName":"","FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","CustomFields":{"CustomFieldName":"CustomFieldValue","Name":"Value"},"DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "tags": [
          "Customers"
        ],
        "summary": "Deletes a customer",
        "description": "Deletes the customer and all its personal data in accordance with GDPR and accounting principles.\n\n</br>\nIf the customer had some contracts with ledger entry, billwerk will archive the invoices and other relevant data.\nTo ensure compliance with data protection laws, customer data will be anonymized before archiving.\n\n</br>\nAfter archiving, customer will not be accessible through UI or API.",
        "operationId": "Customers_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customers": {
      "get": {
        "tags": [
          "Customers"
        ],
        "summary": "Retrieve a list of all customers",
        "operationId": "Customers_GetList_search_statusFilter_externalId_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search customers by External Id, First Name, Last Name, Company Name, Email Address and Debitor Account",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "filter by status",
            "schema": {
              "$ref": "#/components/schemas/CustomerStatus"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Search for a customer by External Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerReadDTO"
                  }
                },
                "example": [{"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0231399Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Wallace, Marcellus","CustomerSubName":"","FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Locale":"en-US","CustomFields":{"CustomFieldName":"CustomFieldValue","Name":"Value"},"DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false},{"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0231471Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Vega, Vincent","CustomerSubName":"","FirstName":"Vincent","LastName":"Vega","Language":"en-US","EmailAddress":"vincent@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"146","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Locale":"en-US","DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Create a new customer.",
        "description": "If you only want to create a customer upon successful signup order please use POST /Orders instead.",
        "operationId": "Customers_PostGeneric_customerDto_POST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerDTO"
              },
              "example": {"FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.com","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","DefaultBearerMedium":"Email","Hidden":false}
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerReadDTO"
                },
                "example": {"Id":"5996a94681b200088ca84f1a","CreatedAt":"2025-08-23T11:18:58.0263958Z","IsDeletable":false,"DeletedAt":"0001-01-01T00:00:00.0000000Z","IsLocked":false,"CustomerName":"Wallace, Marcellus","CustomerSubName":"","FirstName":"Marcellus","LastName":"Wallace","Language":"en-US","EmailAddress":"marcellus@example.org","AdditionalEmailAddresses":[{"EmailAddress":"marcellus02@example.com"},{"EmailAddress":"marcellus03@example.com"}],"Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"AdditionalAddresses":[{"FirstName":"Martin","LastName":"Schmidt","CompanyName":"Billwerk","Street":"Schillergasse","HouseNumber":"17","PostalCode":"89278","City":"Frankfurt am Main","Country":"DE"}],"Locale":"en-US","CustomFields":{"CustomFieldName":"CustomFieldValue","Name":"Value"},"DefaultBearerMedium":"Email","CustomerType":"Consumer","Hidden":false}
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customers/updatelockedstate": {
      "post": {
        "tags": [
          "Customers"
        ],
        "summary": "Switches the locked state of a customer",
        "operationId": "Customers_UpdateLockedState_id_isLocked_POST",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Customer Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isLocked",
            "in": "query",
            "description": "Locked state:true is locked, false is unlocked",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customerselfservice/logout": {
      "delete": {
        "tags": [
          "CustomerSelfService"
        ],
        "summary": "Invalidate self-service token",
        "operationId": "CustomerSelfService_Logout_token_DELETE",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "description": "self-service token",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/discounts/{id}": {
      "get": {
        "tags": [
          "Discounts"
        ],
        "summary": "Retrieve a single discount by Id",
        "operationId": "Discounts_GetItem_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discount Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountReadDTO"
                },
                "example": {"Id":"68a9a3a2e358906f5b2c0701","PlanGroupId":"68a9a3a2e358906f5b2c0702","InternalName":"Starter discount","Description":{"_c":"Starter discount"},"Duration":{"Unit":"Month","Quantity":3},"DurationType":"FixedPeriod","Effect":{"Type":"Relative","ReductionPercent":30},"Targets":{"68a9a3a2e358906f5b2c0703":true,"68a9a3a2e358906f5b2c0704":true},"IncludeSetup":false,"CreateSeparateLineItem":true,"Notes":"I'm a discount note","Hidden":false,"IsDeletable":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Discounts"
        ],
        "summary": "Update a discount",
        "operationId": "Discounts_Put_id_dto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discount Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountDTO"
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Discounts"
        ],
        "summary": "Delete a discount",
        "operationId": "Discounts_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discount Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/discounts": {
      "get": {
        "tags": [
          "Discounts"
        ],
        "summary": "Retrieve a list of discounts",
        "operationId": "Discounts_GetList_from_skip_take_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountReadDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plangroups/{planGroupId}/discounts": {
      "post": {
        "tags": [
          "Discounts"
        ],
        "summary": "Create a new discount",
        "operationId": "Discounts_Post_planGroupId_dto_POST",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "path",
            "description": "PlanGroup Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountDTO"
              }
            }
          }
        },
        "responses": {
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/discountsubscriptions": {
      "get": {
        "tags": [
          "Discount Subscriptions"
        ],
        "summary": "Retrieves discount subscriptions",
        "operationId": "DiscountSubscriptions_Get_from_skip_take_couponCode_couponId_discountId_CustomFields_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "couponCode",
            "in": "query",
            "description": "Coupon code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponId",
            "in": "query",
            "description": "Coupon Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "query",
            "description": "Discount Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
                  }
                },
                "example": [{"Id":"68a9a3a2e358906f5b2c0705","ContractId":"68a9a3a2e358906f5b2c0706","CouponCode":"randomCouponCode","CouponId":"68a9a3a2e358906f5b2c0708","DiscountId":"68a9a3a2e358906f5b2c0707","StartDate":"2025-08-23T11:18:58.0740296Z","Status":"Active","EndDate":"2025-09-23T11:18:58.0740297Z"},{"Id":"68a9a3a2e358906f5b2c0709","ContractId":"68a9a3a2e358906f5b2c070a","DiscountId":"68a9a3a2e358906f5b2c070b","StartDate":"2025-08-23T11:18:58.0740312Z","Status":"Active"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/discountsubscriptions": {
      "get": {
        "tags": [
          "Contracts"
        ],
        "summary": "Retrieves current discount subscriptions for this contract",
        "operationId": "DiscountSubscriptions_GetByContract_contractId_status_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status the listed subscriptions are filtered by",
            "schema": {
              "$ref": "#/components/schemas/SubscriptionStatus"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
                  }
                },
                "example": [{"Id":"68a9a3a2e358906f5b2c070c","ContractId":"68a9a3a2e358906f5b2c070d","CouponCode":"randomCouponCode","CouponId":"68a9a3a2e358906f5b2c070f","DiscountId":"68a9a3a2e358906f5b2c070e","StartDate":"2025-08-23T11:18:58.0761424Z","Status":"Active","EndDate":"2025-09-23T11:18:58.0761424Z"},{"Id":"68a9a3a2e358906f5b2c0710","ContractId":"68a9a3a2e358906f5b2c0711","DiscountId":"68a9a3a2e358906f5b2c0712","StartDate":"2025-08-23T11:18:58.0761437Z","Status":"Active"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Creates a new discount subscription",
        "operationId": "DiscountSubscriptions_Post_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount subscription DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountSubscriptionCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/discountsubscriptions/{discountSubscriptionId}/end": {
      "post": {
        "tags": [
          "Discount Subscriptions"
        ],
        "summary": "Ends a discount subscription",
        "operationId": "DiscountSubscriptions_End_contractId_discountSubscriptionId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountSubscriptionId",
            "in": "path",
            "description": "Discount Subscription Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Discount Subscription DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountSubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/discountsubscriptions/{id}": {
      "get": {
        "tags": [
          "Discount Subscriptions"
        ],
        "summary": "Get a discount subscription by Id",
        "operationId": "DiscountSubscriptions_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Discount subscription Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/dunnings": {
      "get": {
        "tags": [
          "Dunnings"
        ],
        "summary": "Returns a list of dunnings",
        "operationId": "Dunnings_GetList_drafts_customerId_search_from_dateFrom_dateTo_templateId_skip_take_GET",
        "parameters": [
          {
            "name": "drafts",
            "in": "query",
            "description": "True if drafts should be returned, false if sent dunnings should be returned",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Сustomer Id filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by Document No, Company, Name, Customer Id, Debitor Id, Contract Id, Ext. customer Id, Email available.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches documents with a creation date equal or younger than the specified date, optional",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-08-23"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches documents with a creation date equal or older than the specified date, inclusive, optional",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-08-23"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "description": "Filter by used template Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DunningListDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/dunnings/{id}": {
      "get": {
        "tags": [
          "Dunnings"
        ],
        "summary": "Returns a dunning by Id",
        "operationId": "Dunnings_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Dunning Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DunningDetailDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/emails": {
      "get": {
        "tags": [
          "Emails"
        ],
        "summary": "Returns a list of email messages",
        "operationId": "Emails_Get_search_status_skipNew_dateFrom_dateTo_from_skip_take_GET",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search for email messages. You can search by Email, Name, Contract Id, Customer Id, Document Name.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by email message status",
            "schema": {
              "$ref": "#/components/schemas/EmailStatus"
            }
          },
          {
            "name": "skipNew",
            "in": "query",
            "description": "Find in emails sent 2 hours ago",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Filter by email message date from",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Filter by email message date to",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailMessageReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/emails/{id}/resend": {
      "post": {
        "tags": [
          "Emails"
        ],
        "summary": "Resends an email message",
        "operationId": "Emails_PostResend_id_dto_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Email message Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Resend email message DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailResendDTO"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/externalsubscriptions/check": {
      "post": {
        "tags": [
          "External Subscriptions"
        ],
        "summary": "[FEATURE] Checks if a external subscription is active and returns the subscription and contract Ids.",
        "description": "This endpoint is used by the mobile apps to check if a subscription is active and to import it into Frisbii platform.\nPlease find list of possible providers on more information [here](https://docs.frisbii-transform.com/docs/restApi/iap/integration).\n            \nExternal subscription feature is only available for Frisbii customers with the \"External Subscriptions\" add-on.\nPlease contact our [support team](support@frisbii-transform.com) for more information.",
        "operationId": "ExternalSubscriptions_Check_receiptBearerDto_POST",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalSubscriptionBearerCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalSubscriptionCheckDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/invoicebuilder": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Builds an invoice for the given contract",
        "operationId": "InvoiceBuilder_Post_contractId_dto_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Builder DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceBuilderDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDraftDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoicedrafts/{id}": {
      "post": {
        "tags": [
          "[FEATURE] Invoice Drafts"
        ],
        "summary": "Sends the given invoice draft\n<remark>\nThus converting it to an invoice. Returns the newly created invoice.\n</remark>",
        "operationId": "InvoiceDrafts_Post_id_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "InvoiceDraft Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDetailDTO"
                },
                "example": {"SenderName":"Sandbox","SenderAddress":{"Country":"DE"},"CustomerIsLocked":false,"ItemList":[{"Description":"My Product - Basic","Quantity":1,"PricePerUnit":25,"VatPercentage":19,"PeriodStart":"2025-08-23T11:18:58.1922322Z","PeriodEnd":"9999-12-31T22:59:59.9999999Z","PeriodMultiplier":1,"ScaleAmount":1,"ProductId":"5996a94581b200088ca84f0d","TotalNet":25,"TotalVat":4.75,"TotalGross":29.75,"ProductDescription":"Includes basic functions, monthly payment and monthly duration"}],"Prologue":"Dear Sirs,\r\nthank you for your order. Please find the invoice attached","Epilogue":"Thank you for choosing billwerk","DeliveryPeriodStart":"2025-08-23T11:18:58.1922322Z","DeliveryPeriodEnd":"9999-12-31T22:59:59.9999999Z","VatDescriptors":[{"VatPercentage":19.0,"TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"BaseAmount":25.0,"TaxAmount":4.75,"Marker":0}],"ReverseCharge":false,"PriceTaxType":"Net","Multiple":false,"Id":"5996aad781b1ef07d8eb5367","InvoiceNumber":"5996aad781b1ef07d8eb5368","CustomerId":"5996aad781b1ef07d8eb5369","ContractId":"5996aad781b1ef07d8eb5360","SentAt":"2025-08-23T11:18:58.1922322Z","DueDate":"2025-08-23T11:18:58.1922322Z","Created":"0001-01-01T00:00:00.0000000","RecipientName":"Marcellus Wallace","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Currency":"EUR","TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"IsInvoice":true,"DocumentDate":"2025-08-23"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "get": {
        "tags": [
          "[FEATURE] Invoice Drafts"
        ],
        "summary": "Retrieves a draft by Id",
        "operationId": "InvoiceDrafts_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Draft Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDraftDTO"
                },
                "example": {"RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Language":"US","ReverseCharge":false,"DeliveryPeriodStart":"2025-08-23T11:18:58.1961843Z","DeliveryPeriodEnd":"9999-12-31T22:59:59.9999999Z","Prologue":"Dear Sirs,\r\nthank you for your order. Please find the invoice attached","Epilogue":"Thank you for choosing billwerk","ItemList":[{"Description":"My Product - Basic","Quantity":1,"PricePerUnit":25,"VatPercentage":19,"PeriodStart":"2025-08-23T11:18:58.1962364Z","PeriodEnd":"9999-12-31T22:59:59.9999999Z","PeriodMultiplier":1,"ScaleAmount":1,"ProductId":"5996a94581b200088ca84f0d","TotalNet":25,"TotalVat":4.75,"TotalGross":29.75,"ProductDescription":"Includes basic functions, monthly payment and monthly duration"}],"VatDescriptors":[{"VatPercentage":19.0,"TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"BaseAmount":25.0,"TaxAmount":4.75,"Marker":0}],"PriceTaxType":"Net","Multiple":false,"Id":"5996aad781b1ef07d8eb5367","RecipientName":"Marcellus Wallace","RecipientSubName":"","Created":"2025-08-23T11:18:58.1963749Z","Currency":"EUR","TotalGross":29.75,"TotalNet":25.0,"TotalVat":4.75,"CustomerId":"5996aad781b1ef07d8eb5368","ContractId":"5996aad781b1ef07d8eb5369","IsInvoice":true,"CustomerIsLocked":false}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoicedrafts": {
      "get": {
        "tags": [
          "[FEATURE] Invoice Drafts"
        ],
        "summary": "Retrieves a list of all invoice drafts",
        "operationId": "InvoiceDrafts_GetList_customerId_contractId_search_from_skip_take_GET",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer Id, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractId",
            "in": "query",
            "description": "Contract Id, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search invoices by the customers name, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceDraftListDTO"
                  }
                },
                "example": [{"Id":"5996aab281b1ef07d8eb533a","RecipientName":"Marcellus Wallace","RecipientSubName":"","Created":"2025-08-23T11:18:58.2057868Z","Currency":"EUR","TotalGross":29.75,"TotalNet":25.0,"TotalVat":4.75,"CustomerId":"5996aab281b1ef07d8eb533b","ContractId":"5996aab281b1ef07d8eb533c","IsInvoice":true,"CustomerIsLocked":false},{"Id":"5996aab281b1ef07d8eb533a","RecipientName":"Vincent Vega","RecipientSubName":"","Created":"2025-08-23T11:18:58.2057880Z","Currency":"EUR","TotalGross":11.90,"TotalNet":10.0,"TotalVat":1.9,"CustomerId":"5996aab281b1ef07d8eb533b","ContractId":"5996aab281b1ef07d8eb533c","IsInvoice":true,"CustomerIsLocked":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoices": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieves a list of all invoices / credit notes",
        "operationId": "Invoices_GetList_customerId_search_dateFrom_dateTo_from_skip_take_GET",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "description": "Customer Id, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search parameter can contain the recipient's Last Name, First Name, Company Name, or Document Number, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches documents with a document date equal or younger than the specified date, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches documents with a document date equal or older than the specified date, inclusive, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceListDTO"
                  }
                },
                "example": [{"Id":"59a7df8481b1f01090e6ab6a","InvoiceNumber":"59a7df8481b1f01090e6ab6b","CustomerId":"59a7df8481b1f01090e6ab6c","ContractId":"59a7df8481b1f01090e6ab6d","SentAt":"2025-08-23T11:18:58.2120860Z","DueDate":"2025-08-23T11:18:58.2120860Z","Created":"2025-08-23T11:18:58.2120860Z","RecipientName":"Marcellus Wallace","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Currency":"EUR","TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"IsInvoice":true,"DocumentDate":"2025-08-23"},{"Id":"59a7df8481b1f01090e6ab6e","InvoiceNumber":"59a7df8481b1f01090e6ab6f","CustomerId":"59a7df8481b1f01090e6ab6g","ContractId":"59a7df8481b1f01090e6ab6h","SentAt":"2025-08-23T11:18:58.2120860Z","DueDate":"2025-08-23T11:18:58.2120860Z","Created":"2025-08-23T11:18:58.2120860Z","RecipientName":"Vincent Vega","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"146","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Currency":"EUR","TotalNet":10.00,"TotalVat":1.90,"TotalGross":11.90,"IsInvoice":true,"DocumentDate":"2025-08-23"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoices/{id}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieves a document's details by Id",
        "operationId": "Invoices_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceDetailDTO"
                },
                "example": {"SenderName":"billwerk GmbH","SenderAddress":{"Street":"Mainzer Landstraße","HouseNumber":"33a","PostalCode":"60329","City":"Frankfurt am Main","Country":"DE"},"CustomerIsLocked":false,"SenderVatId":"DE57567543","SenderTaxNumber":"234/4234/54543","RecipientVatId":"DE4564587981","RecipientTaxNumber":"","ItemList":[{"Description":"My Product - Basic","Quantity":1,"PricePerUnit":25,"VatPercentage":19,"PeriodStart":"2025-08-23T11:18:58.2147137Z","PeriodEnd":"9999-12-31T22:59:59.9999999Z","PeriodMultiplier":1,"ScaleAmount":1,"ProductId":"5996a94581b200088ca84f0d","TotalNet":25,"TotalVat":4.75,"TotalGross":29.75,"ProductDescription":"Includes basic functions, monthly payment and monthly duration","DiscountId":"6705064c2d2a36731b002879","IsDiscount":false}],"Prologue":"Dear Sirs,\r\nthank you for your order. Please find the invoice attached","Epilogue":"Thank you for choosing billwerk","DeliveryPeriodStart":"2025-08-23T11:18:58.2147137Z","DeliveryPeriodEnd":"9999-12-31T22:59:59.9999999Z","VatDescriptors":[{"VatPercentage":19.0,"TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"BaseAmount":25.0,"TaxAmount":4.75,"Marker":0}],"BearerMedium":"Email","ReverseCharge":false,"PriceTaxType":"Net","Multiple":false,"Id":"5996aab281b1ef07d8eb533a","InvoiceNumber":"59a7df8481b1f01090e6ab6a","CustomerId":"5996aab281b1ef07d8eb533b","ContractId":"5996aab281b1ef07d8eb533c","SentAt":"2025-08-23T11:18:58.2147137Z","DueDate":"2025-08-23T11:18:58.2147137Z","Created":"2025-08-23T11:18:58.2147137Z","RecipientName":"Marcellus Wallace","RecipientSubName":"","RecipientAddress":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Currency":"EUR","TotalNet":25.0,"TotalVat":4.75,"TotalGross":29.75,"IsInvoice":true,"DocumentDate":"2025-08-23"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoices/{id}/downloadlink": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Creates a file download token for the given invoice.",
        "description": "The file can subsequently be downloaded through the given URL.\nPlease note that that URL is not under /api/v1 and doesn't need an OAuth token, i.e. you can present these links to your users.\nConsequently, the links have limited validity.",
        "operationId": "Invoices_CreateDownloadLink_id_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadLinkDTO"
                },
                "example": {"Url":"/Files/1vRmbVt13TyAqfLwXGXjxb","Expiry":"2025-08-24T11:18:58.2165115Z"}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoices/{id}/download": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Rest endpoint for direct download of invoice PDFs",
        "operationId": "Invoices_GetDirectDownload_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": { }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/invoices/{id}/usage": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Retrieves the invoice's associated metered usage",
        "operationId": "Invoices_GetMeteredUsage_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Invoice Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeteredUsageReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:58.2206164Z","BilledOn":"2025-08-23T11:18:58.2206165Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:58.2206169Z"},{"Id":"599d51f881b1f00a28f7aea2","ContractId":"599d51f881b1f00a28f7aea3","TransferredAt":"2025-08-23T11:18:58.2206211Z","BilledOn":"2025-08-23T11:18:58.2206212Z","ComponentId":"599d51f881b1f00a28f7aea4","Quantity":42,"Memo":"memoExample","CustomFields":{"Key1":"Value1","Key2":"Value2"},"DueDate":"2025-08-23T11:18:58.2206213Z"}]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/customers/{customerId}/ledgerentries": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Returns all ledger entries for a customer.",
        "operationId": "LedgerEntries_GetLedgerEntriesByCustomer_customerId_GET",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "description": "Customer Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerEntryReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/ledgerentries": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Returns all ledger entries for a merchant.",
        "operationId": "LedgerEntries_GetLedgerEntriesByMerchant_from_customerId_contractId_take_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "in": "query",
            "description": "Filter Results Based on Cusomer Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractId",
            "in": "query",
            "description": "Filter Results Based on Contract Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerEntryReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Occurs when no customer exists for the provided customerId, or no contract exists for the provided contractId.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/ledgerentries": {
      "get": {
        "tags": [
          "Ledger"
        ],
        "summary": "Returns all ledger entries for a contract.",
        "operationId": "LedgerEntries_GetLedgerEntriesByContract_contractId_from_skip_take_GET",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerEntryReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieves a single order by Id",
        "operationId": "Orders_GetOrder_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                },
                "example": {"AllowWithoutPaymentData":false,"Total":0,"TotalVat":0,"TotalGross":0,"NextTotalGross":0,"IsTrial":false,"TrialEndPolicy":"NoTrial","Status":"InProgress","OrderType":"Signup","TriggerInterimBilling":true,"Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete an order.",
        "description": "Orders which have not yet been finalized through commit can be deleted to remove the associated personal data from the system.\nOrders must be created more than 2 hours ago to ensure that customer is not trying to finalize it.\n\n</br>\nNote: Committed orders trigger the creation of a contract. Such orders will be stored as long as contract exists. To delete them, the contract should be deleted as well.",
        "operationId": "Orders_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve a list of orders",
        "operationId": "Orders_GetList_search_from_dateFrom_dateTo_status_type_skip_take_GET",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search orders by First Name, Last Name, Company Name, Email Address, Customer Id, and Debtor Account",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches orders with creation date equal or younger specified timestamp",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches orders with creation date equal or older than specified timestamp",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Searches orders with given OrderStatus",
            "schema": {
              "$ref": "#/components/schemas/OrderStatus"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Searches orders with given OrderType",
            "schema": {
              "$ref": "#/components/schemas/OrderType"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderReadDTO"
                  }
                },
                "example": [{"AllowWithoutPaymentData":false,"Total":0,"TotalVat":0,"TotalGross":0,"NextTotalGross":0,"IsTrial":false,"TrialEndPolicy":"NoTrial","Status":"InProgress","OrderType":"Signup","TriggerInterimBilling":false,"Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"PreviewAfterTrial":false,"BillOnContractStartDate":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create a new plan/component subscription or up/downgrade order.",
        "description": "Please note, orders might have a limited lifetime. For simple signup/subscription implementation\n            we recommend using SubscriptionJS rather than API, unless you have strong reasons.\n            \n\n\n            CustomerChange does <strong>NOT</strong> work on Signups. The JSON must resemble a CustomerDTO.",
        "operationId": "Orders_PostOrder_orderDto_POST",
        "requestBody": {
          "description": "OrderDTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDTO"
              },
              "examples": {
                "Signup": {
                  "value": {"TriggerInterimBilling":false,"Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
                },
                "Upgrade": {
                  "value": {"ChangeDate":"2025-08-23T11:18:58.4054004Z","TriggerInterimBilling":true,"ContractId":"579d51f881b1f00a28f8aeb5","Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/orders/{id}/paymenttransactions": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve payment transactions for an order",
        "operationId": "Orders_GetPaymentTransactions_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentTransactionReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/orders/preview": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Previews a signup order with pricing information",
        "description": "This endpoint works very similar to POST /Orders, by returning an order object, but does not actually create the order persistently.\nYou can pass the same data. It can be used to show pricing information of the cart.\nLikewise a real order creation it takes into account passed customer data like VAT ID and country to determine the actual price and taxes.",
        "operationId": "Orders_OrderPreview_orderDto_POST",
        "requestBody": {
          "description": "Order object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderDTO"
              },
              "examples": {
                "Signup": {
                  "value": {"TriggerInterimBilling":false,"Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
                },
                "Upgrade": {
                  "value": {"ChangeDate":"2025-08-23T11:18:58.4140770Z","TriggerInterimBilling":true,"ContractId":"579d51f881b1f00a28f8aeb5","Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                },
                "examples": {
                  "Signup preview": {
                    "value": {"Order":{"PlanVariantId":"63ee0e6c4b48c9905588c823","PriceListId":"63edff41f73852939c2d34e0","AllowWithoutPaymentData":false,"ComponentSubscriptions":[],"DiscountSubscriptions":[],"MeteredComponents":[],"RecurringFee":{"ComponentType":"QuantityBased","PreventModification":true,"FeePeriod":{"Unit":"Month","Quantity":1},"Name":"Mein Produkt - Advanced","PricePerUnit":100,"VatPercentage":19,"LineItems":[{"Description":"Mein Produkt - Advanced","Quantity":1,"PricePerUnit":100,"VatPercentage":19,"PeriodStart":"2025-08-23T11:18:58.4172742Z","PeriodEnd":"2025-09-23T11:18:58.4172742Z","PeriodMultiplier":1,"ScaleAmount":1,"ProductId":"63edff41f73852939c2d34e5","TotalNet":100,"TotalVat":19,"TaxPolicyId":"63edfeb8f73852939c2d3498","TotalGross":119,"ProductDescription":"string"}],"TotalNet":100,"TotalVat":19,"Description":"string","IsQuantityBased":false,"VariantName":"monatliche Laufzeit","VariantDescription":"string","ComponentId":"63edff41f73852939c2d34e5","Quantity":1},"SetupFee":{"ComponentType":"QuantityBased","PreventModification":true,"Name":"string","PricePerUnit":5,"VatPercentage":19,"LineItems":[{"Description":"string","Quantity":1,"PricePerUnit":5,"VatPercentage":19,"PeriodStart":"2025-08-23T11:18:58.4172742Z","PeriodEnd":"2025-08-23T11:18:58.4172742Z","ProductId":"63edff41f73852939c2d34e5","TotalNet":5,"TotalVat":0.95,"TaxPolicyId":"63edfeb8f73852939c2d3498","TotalGross":5.95}],"TotalNet":0,"TotalVat":0,"IsQuantityBased":false,"Quantity":0},"Currency":"EUR","Total":115,"TotalVat":21.85,"TotalGross":136.85,"NextTotalGross":130.90,"NextTotalGrossDate":"2025-09-23T11:18:58.4172742Z","IsTrial":false,"TrialEndPolicy":"NoTrial","Status":"InProgress","OrderType":"Signup","TriggerInterimBilling":false,"PreviewAfterTrial":false,"BillOnContractStartDate":false}}
                  },
                  "Signup preview with trial plan variant": {
                    "value": {"Order":{"PlanVariantId":"63ee0e6c4b48c9905588c823","PriceListId":"63edff41f73852939c2d34e0","AllowWithoutPaymentData":true,"ComponentSubscriptions":[],"DiscountSubscriptions":[],"MeteredComponents":[],"RecurringFee":{"ComponentType":"QuantityBased","PreventModification":true,"FeePeriod":{"Unit":"Month","Quantity":1},"Name":"Trial plan","PricePerUnit":0,"VatPercentage":0,"LineItems":[],"TotalNet":0,"TotalVat":0,"IsQuantityBased":false,"VariantName":"Trial","ComponentId":"63ee0e6c4b48c9905588c823","Quantity":1},"Currency":"EUR","Total":0,"TotalVat":0,"TotalGross":0,"NextTotalGross":0,"IsTrial":true,"TrialPeriod":{"Unit":"Month","Quantity":1},"TrialEndPolicy":"RequestPayment","Status":"InProgress","OrderType":"Signup","TriggerInterimBilling":false,"PreviewAfterTrial":false,"BillOnContractStartDate":false}}
                  },
                  "Upgrade preview": {
                    "value": {"Order":{"Id":"63ee4e64e8befeb216682839","PlanVariantId":"63ee0e6c4b48c9905588c823","PriceListId":"63edff41f73852939c2d34e0","PlanId":"63edff41f73852939c2d34e2","AllowWithoutPaymentData":true,"LineItems":[{"Description":"Mein Produkt - Basic","Quantity":-1,"PricePerUnit":50,"VatPercentage":19,"PeriodStart":"2025-09-23T11:18:58.4172742Z","PeriodEnd":"2025-08-23T11:18:58.4172742Z","PeriodMultiplier":-1,"ScaleAmount":1,"ProductId":"63edff41f73852939c2d34e3","TotalNet":-50,"TotalVat":-9.5,"TaxPolicyId":"63edfeb8f73852939c2d3498","TotalGross":-59.5,"ProductDescription":"string"},{"Description":"Mein Produkt - Advanced","Quantity":1,"PricePerUnit":100,"VatPercentage":19,"PeriodStart":"2023-02-16T00:00:00.0000000","PeriodEnd":"2023-03-16T00:00:00.0000000","PeriodMultiplier":1,"ScaleAmount":1,"ProductId":"63edff41f73852939c2d34e5","TotalNet":100,"TotalVat":19,"TaxPolicyId":"63edfeb8f73852939c2d3498","TotalGross":119,"ProductDescription":"string"}],"ComponentSubscriptions":[],"DiscountSubscriptions":[],"MeteredComponents":[],"Contract":{"Id":"63edff42f73852939c2d351b","LastBillingDate":"2025-08-23T11:18:58.4172742Z","NextBillingDate":"2025-09-23T11:18:58.4172742Z","PlanId":"63edff41f73852939c2d34e2","CustomerId":"63edff41f73852939c2d34ec","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e5","PlanId":"63edff41f73852939c2d34e2","Quantity":1,"InheritStartDate":false}],"Pauses":[],"Balance":0,"ReferenceCode":"XXXX-YYYY","Currency":"EUR","PlanGroupId":"63edff41f73852939c2d34df","PriceListId":"63edff41f73852939c2d34e0","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e5","PlanId":"63edff41f73852939c2d34e2","Quantity":1,"InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:58.4172742Z","EndDate":"2026-08-23T11:18:58.4172742Z","BilledUntil":"2025-09-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e5","Notes":"NoteExample"},"Currency":"EUR","Total":59.5,"TotalVat":9.5,"TotalGross":59.5,"NextTotalGross":119,"NextTotalGrossDate":"2025-09-23T11:18:58.4172742Z","IsTrial":false,"TrialEndPolicy":"NoTrial","Status":"InProgress","CreatedAt":"2025-08-23T11:18:58.4172742Z","PlanName":"My Product - Advanced","PlanVariantName":"string","OrderType":"Upgrade","ChangeDate":"2025-08-23T11:18:58.4172742Z","TriggerInterimBilling":false,"CustomerId":"63edff41f73852939c2d34ec","ContractId":"63edff42f73852939c2d351b","Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"ContractCustomFields":{},"PreviewAfterTrial":false,"CustomFields":{},"BillOnContractStartDate":false}}
                  },
                  "Upgrade preview with trial plan variant": {
                    "value": {"Order":{"Id":"63ee4e64e8befeb216682839","PlanVariantId":"63ee0e6c4b48c9905588c823","PriceListId":"63edff41f73852939c2d34e0","PlanId":"63edff41f73852939c2d34e2","AllowWithoutPaymentData":true,"LineItems":[],"ComponentSubscriptions":[],"DiscountSubscriptions":[],"MeteredComponents":[],"Contract":{"Id":"63edff42f73852939c2d351b","LastBillingDate":"2025-08-23T11:18:58.4172742Z","NextBillingDate":"2025-09-23T11:18:58.4172742Z","PlanId":"63edff41f73852939c2d34e1","CustomerId":"63edff41f73852939c2d34ec","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e3","PlanId":"63edff41f73852939c2d34e1","Quantity":1,"InheritStartDate":false},{"Type":"Normal","StartDate":"2025-09-23T11:18:58.4172742Z","PlanVariantId":"63ee0e6c4b48c9905588c823","PlanId":"63ee0e654b48c9905588c818","Quantity":1,"InheritStartDate":false}],"Pauses":[],"Balance":0,"ReferenceCode":"XXXX-YYYY","Currency":"EUR","PlanGroupId":"63edff41f73852939c2d34df","PriceListId":"63edff41f73852939c2d34e0","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e3","PlanId":"63edff41f73852939c2d34e1","Quantity":1,"InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:58.4172742Z","EndDate":"2026-08-23T11:18:58.4172742Z","BilledUntil":"2025-09-23T11:18:58.4172742Z","PlanVariantId":"63edff41f73852939c2d34e3","Notes":"NoteExample"},"Currency":"EUR","Total":0,"TotalVat":0,"TotalGross":0,"NextTotalGross":0,"IsTrial":false,"TrialEndPolicy":"ActivateFallbackPlanVariant","Status":"InProgress","CreatedAt":"2025-08-23T11:18:58.4172742Z","PlanName":"Trial plan","PlanVariantName":"Trial","OrderType":"Upgrade","ChangeDate":"2025-09-23T11:18:58.4172742Z","TriggerInterimBilling":false,"CustomerId":"63edff41f73852939c2d34ec","ContractId":"63edff42f73852939c2d351b","Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"ContractCustomFields":{},"PreviewAfterTrial":false,"CustomFields":{},"BillOnContractStartDate":false}}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/orders/{id}/commit": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Process and finalize an order",
        "operationId": "Orders_PostCommitOrder_id_orderCommitDto_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Order object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCommitDTO"
              },
              "example": {"PaymentMethod":"BlackLabel:InvoicePayment"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:58.4267085Z","NextBillingDate":"2025-08-23T11:18:58.4267087Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4267093Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:58.4267096Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4267105Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:58.4267107Z","EndDate":"2025-08-23T11:18:58.4267109Z","BilledUntil":"2025-08-23T11:18:58.4267109Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"}
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                },
                "example": {"AllowWithoutPaymentData":false,"Total":0,"TotalVat":0,"TotalGross":0,"NextTotalGross":0,"IsTrial":false,"TrialEndPolicy":"NoTrial","Status":"InProgress","OrderType":"Signup","TriggerInterimBilling":true,"Cart":{"PlanVariantId":"599d51f881b1f00a28f7aeb1","InheritStartDate":false,"ComponentSubscriptions":[{"ComponentId":"599d51f881b1f00a28f7aeb2","Quantity":2.0}]},"Customer":{"FirstName":"Marcellus","LastName":"Wallace","VatId":"DE424324234","EmailAddress":"marcellus@example.com","Address":{"Street":"Raymond Ave (Holly)","HouseNumber":"145","PostalCode":"91001","City":"Pasadena","Country":"CA"},"Hidden":false},"PreviewAfterTrial":false,"BillOnContractStartDate":false}
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/orders/{id}/approve": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[FEATURE] Approve an order",
        "description": "<strong>This is an feature discriminated endpoint. Make sure your account has this feature enabled or contact <a href=\"mailto:support@frisbii-transform.com\">support</a>.</strong>",
        "operationId": "Orders_Approve_id_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7ae9e","LastBillingDate":"2025-08-23T11:18:58.4304051Z","NextBillingDate":"2025-08-23T11:18:58.4304052Z","PlanId":"599d51f881b1f00a28f7ae9f","CustomerId":"599d51f881b1f00a28f7ae9g","IsDeletable":false,"LifecycleStatus":"Active","CustomerName":"Marcellus Wallace","CustomerIsLocked":false,"Phases":[{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4304058Z","PlanVariantId":"599d51f881b1f00a28f7ae9h","PlanId":"599d51f881b1f00a28f7ae9i","InheritStartDate":false},{"Type":"Trial","StartDate":"2025-08-23T11:18:58.4304062Z","PlanVariantId":"599d51f881b1f00a28f7ae9j","PlanId":"599d51f881b1f00a28f7ae9k","InheritStartDate":false}],"Balance":0,"Currency":"EUR","PlanGroupId":"599d51f881b1f00a28f7ae9l","PaymentBearer":{"CardType":"Visa","ExpiryMonth":12,"ExpiryYear":2020,"Holder":"Marcellus Wallace","Last4":"1234","Type":"CreditCard","Country":"DE"},"PaymentProvider":"PayOne","EscalationSuspended":false,"RecurringPaymentsPaused":false,"CurrentPhase":{"Type":"Normal","StartDate":"2025-08-23T11:18:58.4304072Z","PlanVariantId":"599d51f881b1f00a28f7ae9m","PlanId":"599d51f881b1f00a28f7ae9n","InheritStartDate":false},"PaymentProviderSupportRefunds":false,"BillingSuspended":false,"ThresholdBillingDisabled":false,"TimeGranularity":"Precise","StartDate":"2025-08-23T11:18:58.4304074Z","EndDate":"2025-08-23T11:18:58.4304075Z","BilledUntil":"2025-08-23T11:18:58.4304076Z","PlanVariantId":"599d51f881b1f00a28f7ae9o","Notes":"NoteExample"}
              }
            }
          },
          "422": {
            "description": "Order failed"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/orders/{orderId}/customer": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Patch customer information of in specific order",
        "operationId": "Orders_PatchCustomer_orderId_patch_PATCH",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "JSON Patch Document",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RawJson"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/orders/{id}/decline": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "[FEATURE] Decline an order",
        "description": "<strong>This is an feature discriminated endpoint. Make sure your account has this feature enabled or contact <a href=\"mailto:support@frisbii-transform.com\">support</a>.</strong>",
        "operationId": "Orders_Decline_id_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderReadDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/paymentrefunds": {
      "get": {
        "tags": [
          "Refunds"
        ],
        "summary": "Retrieves a list of payment refunds.",
        "operationId": "PaymentRefunds_Get_search_status_dateFrom_dateTo_from_skip_take_GET",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search string that allow to find refund by PaymentTransactionId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter by status",
            "schema": {
              "$ref": "#/components/schemas/PaymentRefundStatus"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches refunds with a creation date equal or younger than the specified timestamp, optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches refunds with a creation date equal or older than the specified timestamp, optional",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentRefundDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/paymenttransactions/{id}": {
      "get": {
        "tags": [
          "Payment Transactions"
        ],
        "summary": "Gets a single Payment Transaction by its Id.",
        "operationId": "PaymentTransactions_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Payment Transaction Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionWithInvoiceIdDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/paymenttransactions": {
      "get": {
        "tags": [
          "Payment Transactions"
        ],
        "summary": "Retrieves a list of Payment Transactions.",
        "operationId": "PaymentTransactions_Get_search_status_from_dateFrom_dateTo_excludePreauth_skip_take_GET",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Transaction ID, Provider Transaction ID, Customer Name, Contract ID or PayPal Email optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Payment Status, optional",
            "schema": {
              "$ref": "#/components/schemas/PaymentStatusValue"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Item ID from which the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches Payment Transactions with creation time equal or younger than the timestamp specified",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches Payment Transactions with creation time older than the timestamp specified",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "excludePreauth",
            "in": "query",
            "description": "exclude Preauthorizations, optional (default: false)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentTransactionReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/paymenttransactions/downloadlink": {
      "post": {
        "tags": [
          "Payment Transactions"
        ],
        "summary": "Creates a file download token for the given Payment Transactions File.",
        "operationId": "PaymentTransactions_CreateDownloadLinkByFilter_dateFrom_dateTo_search_status_excludePreauth_POST",
        "parameters": [
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Searches Payment Transactions with creation time equal or younger than the timestamp specified",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Searches Payment Transactions with creation time older than the timestamp specified",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Transaction ID, Provider Transaction Id, Customer Name or Contract Id, optional",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Payment Status, optional",
            "schema": {
              "$ref": "#/components/schemas/PaymentStatusValue"
            }
          },
          {
            "name": "excludePreauth",
            "in": "query",
            "description": "exclude Preauthorizations, optional (default: false)",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadLinkDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plangroups/{id}": {
      "get": {
        "tags": [
          "Plan Groups"
        ],
        "summary": "Retrieves a single Plan Group by Id",
        "operationId": "PlanGroups_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Group Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanGroupReadDTO"
                },
                "example": {"Id":"5996a944ba5c2e08203e8f51","Name":{"_c":"Standard"},"Currency":"EUR","TimeGranularity":"Precise","PriceTaxType":"Net","Hidden":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Plan Groups"
        ],
        "summary": "Deletes a Plan Group",
        "operationId": "PlanGroups_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Group Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Plan Groups"
        ],
        "summary": "Updates a Plan Group",
        "operationId": "PlanGroups_PutItem_id_planGroupDTO_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Group Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan Group DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanGroupReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/plangroups": {
      "get": {
        "tags": [
          "Plan Groups"
        ],
        "summary": "Retrieves a list of plan groups",
        "operationId": "PlanGroups_Get_from_search_skip_take_showHidden_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "showHidden",
            "in": "query",
            "description": "Show hidden plan groups",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanGroupReadDTO"
                  }
                },
                "example": [{"Id":"5996a944ba5c2e08203e8f51","Name":{"_c":"Standard"},"Currency":"EUR","TimeGranularity":"Precise","PriceTaxType":"Net","Hidden":false},{"Id":"5996a944ba5c2e08203e8f52","Name":{"_c":"Dollar"},"Currency":"USD","TimeGranularity":"Precise","PriceTaxType":"Net","Hidden":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Plan Groups"
        ],
        "summary": "Creates a new Plan Group",
        "operationId": "PlanGroups_PostGeneric_planGroupDTO_POST",
        "requestBody": {
          "description": "Plan Group DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanGroupReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/plangroupstats": {
      "get": {
        "tags": [
          "Statistics"
        ],
        "summary": "Returns statistics for a plan group.",
        "operationId": "PlanGroupStats_Get_planGroupId_numberOfSteps_stepSize_currency_groupByMonths_dateTo_dateFrom_GET",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "query",
            "description": "Plan group Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "numberOfSteps",
            "in": "query",
            "description": "Number of steps",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stepSize",
            "in": "query",
            "description": "Step size",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "Currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupByMonths",
            "in": "query",
            "description": "Group by months",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Date to",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Date from",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardStatsDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plans/{id}": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieves a single Plan by Id",
        "operationId": "Plans_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanReadDTO"
                },
                "example": {"PlanGroupId":"5996a944ba5c2e08203e8f51","Id":"5996a944ba5c2e08203e8f52","Name":{"_c":"My Product - Basic"},"SetupDescription":{"_c":"Setup fee"},"PlanDescription":{"_c":"All basic features are included."},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5996a944ba5c2e08203e8f52","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Plans"
        ],
        "summary": "Delete a Plan",
        "operationId": "Plans_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Plans"
        ],
        "summary": "Update a Plan",
        "operationId": "Plans_PutItem_id_planDto_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plangroups/{planGroupId}/plans": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Get a list of available plans for a specific Plan Group",
        "operationId": "Plans_GetByPlanGroupId_planGroupId_from_skip_take_GET",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "path",
            "description": "Plan Group Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Create a new Plan",
        "operationId": "Plans_PostGeneric_planGroupId_planDto_POST",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "path",
            "description": "Plan Group Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plans": {
      "get": {
        "tags": [
          "Plans"
        ],
        "summary": "Retrieve a list of available plans",
        "operationId": "Plans_Get_planGroupId_from_skip_take_CustomFields_GET",
        "parameters": [
          {
            "name": "planGroupId",
            "in": "query",
            "description": "Filter for specific Plan Group",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the plans are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "customFields",
            "in": "query",
            "description": "Custom fields to search the exact match of. Supports formats customFields[{customFieldKey}]={value} or customFields.{customFieldKey}={value}.",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanReadDTO"
                  }
                },
                "example": [{"PlanGroupId":"5996a944ba5c2e08203e8f51","Id":"5996a944ba5c2e08203e8f52","Name":{"_c":"My Product - Basic"},"SetupDescription":{"_c":"Setup fee"},"PlanDescription":{"_c":"All basic features are included."},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5981a1e381b1fc126071dc3e","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false},{"PlanGroupId":"5996a944ba5c2e08203e8f53","Id":"5996a944ba5c2e08203e8f54","Name":{"_c":"My Product - Advanced"},"SetupDescription":{"_c":"Setup fee"},"PlanDescription":{"_c":"All basic features are included."},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5981a1e381b1fc126071dc3e","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/plans/{planId}/clone": {
      "post": {
        "tags": [
          "Plans"
        ],
        "summary": "Clone a Plan",
        "operationId": "Plans_PostClone_planId_POST",
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "description": "Plan Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanReadDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/planvariants/{id}": {
      "get": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Retrieves a single Plan Variant by Id",
        "description": "ExternalSubscriptionType property does not exist for products that are billed internally",
        "operationId": "PlanVariants_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Variant Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanVariantReadDTO"
                },
                "example": {"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5996a945ba5c2e08203e8f5b","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"monatliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Updates a Plan Variant",
        "operationId": "PlanVariants_PutItem_id_planVariantDTO_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Variant Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan Variant DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanVariantDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanVariantReadDTO"
                },
                "example": {"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5996a945ba5c2e08203e8f5b","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"monatliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Deletes a Plan Variant",
        "operationId": "PlanVariants_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Plan Variant Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/plans/{planId}/planvariants": {
      "get": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Retrieves a list of available Plan Variants. The planId must be provided inside the route for this endpoint.",
        "description": "ExternalSubscriptionType property does not exist for products that are billed internally",
        "operationId": "PlanVariants_GetGenericByRoute_planId_externalId_skip_take_GET",
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "description": "Filter for specific Plan",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter for specific External ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanVariantReadDTO"
                  }
                },
                "example": [{"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5996a945ba5c2e08203e8f5b","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"moantliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"},{"Id":"5996a945ba5c2e08203e8f5c","PlanId":"5996a945ba5c2e08203e8f5d","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":12},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":175,"SetupFee":25,"InternalName":"jährliche Laufzeit","Description":{"_c":"yearly renewal and yearly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Creates a new Plan Variant for the given Plan",
        "operationId": "PlanVariants_PostGeneric_planId_planVariantDTO_POST",
        "parameters": [
          {
            "name": "planId",
            "in": "path",
            "description": "Plan Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Plan Variant DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlanVariantCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlanVariantReadDTO"
                },
                "example": {"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5996a945ba5c2e08203e8f5b","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"monatliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/planvariants": {
      "get": {
        "tags": [
          "Plan Variants"
        ],
        "summary": "Retrieves a list of available Plan Variants",
        "description": "ExternalSubscriptionType property does not exist for products that are billed internally",
        "operationId": "PlanVariants_GetGeneric_externalId_planId_skip_take_GET",
        "parameters": [
          {
            "name": "externalId",
            "in": "query",
            "description": "Filter for specific External Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "query",
            "description": "Filter for specific Plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PlanVariantReadDTO"
                  }
                },
                "example": [{"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5996a945ba5c2e08203e8f5b","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"moantliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"},{"Id":"5996a945ba5c2e08203e8f5c","PlanId":"5996a945ba5c2e08203e8f5d","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":12},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":175,"SetupFee":25,"InternalName":"jährliche Laufzeit","Description":{"_c":"yearly renewal and yearly payment"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/postinggroups/postings": {
      "get": {
        "tags": [
          "Postings"
        ],
        "summary": "Retrieves a list of Posting Groups",
        "operationId": "PostingGroups_Postings_CustomerId_ContractId_DebitorAccount_IsExported_HideReversed_AnyAccount_dateFrom_dateTo_PostingDateExclusiveEnd_Kind_Skip_Take_From_GET",
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "debitorAccount",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isExported",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideReversed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "anyAccount",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-08-23"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-08-23"
            }
          },
          {
            "name": "postingDateExclusiveEnd",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2025-08-23"
            }
          },
          {
            "name": "kind",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PostingKind"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "description": "If you are using pagination, you can skip n items (1000 max.)",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "description": "Limit returned items (Max = 500, Default = 200)",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string",
              "description": "Cursor from where on the items are listed"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExtendedPostingDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/prepaidcards/redeem": {
      "post": {
        "tags": [
          "[FEATURE] Prepaid Cards"
        ],
        "summary": "Redeeming a prepaid card",
        "description": "This is an feature discriminated endpoint. Make sure your account has this feature enabled or contact [support](support@frisbii-transform.com).",
        "operationId": "PrepaidCards_Redeem_redemptionDto_POST",
        "requestBody": {
          "description": "Prepaid card redemption data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepaidCardRedemptionDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrepaidCardReadDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/pricelists/{id}": {
      "get": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Retrieves a single Price List by ID",
        "operationId": "PriceLists_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Updates a Price List",
        "operationId": "PriceLists_PutItem_id_priceListDTO_PUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Updated Price List DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Delete a Price List",
        "operationId": "PriceLists_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/pricelists": {
      "get": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Retrieves a list of price lists",
        "operationId": "PriceLists_Get_skip_take_search_planGroupId_showHidden_from_GET",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by Id, InternalName",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planGroupId",
            "in": "query",
            "description": "plan group id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showHidden",
            "in": "query",
            "description": "Show hidden price lists",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceListReadDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Creates a new Price List",
        "operationId": "PriceLists_PostGeneric_priceListDTO_POST",
        "requestBody": {
          "description": "Price List DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/api/v1/pricelists/{priceListId}/createinherited": {
      "post": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Creates inherited Price List",
        "operationId": "PriceLists_PostCreateInherited_priceListId_POST",
        "parameters": [
          {
            "name": "priceListId",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/pricelists/{priceListId}/clone": {
      "post": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Clones a Price List",
        "operationId": "PriceLists_PostClone_priceListId_POST",
        "parameters": [
          {
            "name": "priceListId",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListReadDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/pricelists/pricelistitems": {
      "put": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Updates a list of Price List Items",
        "operationId": "PriceLists_PutPriceListItems_items_PUT",
        "requestBody": {
          "description": "Updated Price List Items",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PriceListItemStandaloneDTO"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": true
      }
    },
    "/api/v1/pricelists/modifypricelistitems": {
      "put": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Modifies Price List Items",
        "operationId": "PriceLists_ModifyPriceListItems_modifyPriceList_PUT",
        "requestBody": {
          "description": "Contains two list of Price List Items. 'PriceListItems' for Edit/Define/Override operations and 'RemovePriceListItems' for Inherit operation.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyPriceListItemsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/pricelists/prices": {
      "get": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Retrieves a list of prices",
        "operationId": "PriceLists_GetAllPrices_productId_planGroupId_search_GET",
        "parameters": [
          {
            "name": "productId",
            "in": "query",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planGroupId",
            "in": "query",
            "description": "Plan Group ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Search by InternalName",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PriceListItemStandaloneReadDTO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/pricelists/{priceListId}/price/{productId}": {
      "get": {
        "tags": [
          "Price Lists"
        ],
        "summary": "Retrieves a Product Price List Item",
        "operationId": "PriceLists_GetSinglePrice_productId_priceListId_GET",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priceListId",
            "in": "path",
            "description": "Price List ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListItemDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/v1/productinfo": {
      "get": {
        "tags": [
          "ProductInfo"
        ],
        "summary": "Retrieves product information",
        "operationId": "ProductInfo_Get_showHidden_GET",
        "parameters": [
          {
            "name": "showHidden",
            "in": "query",
            "description": "Include hidden elements",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductInfoDTO"
                },
                "example": {"PlanGroups":[{"Id":"5a9ff61c81b1f010e02fbe91","Name":{"_c":"Standard"},"Currency":"EUR","TimeGranularity":"Precise","PriceTaxType":"Net","Hidden":false}],"Plans":[{"PlanGroupId":"5a9ff61c81b1f010e02fbe91","Id":"5a9ff61c81b1f010e02fbe93","Name":{"_c":"My Product - Advanced","de":"Mein Produkt - Advanced"},"SetupDescription":{"_c":"Setup fee","de":"Einrichtungsgeb�hr"},"PlanDescription":{"_c":"all basic features plus feature deluxe included","de":"enth�lt alle basic-Funktionen plus das Feature Deluxe"},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5996a944ba5c2e08203e8f52","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false,"CustomFields":{}},{"PlanGroupId":"5a9ff61c81b1f010e02fbe91","Id":"5a9ff61bba5c1e154c958d11","Name":{"_c":"My Product - Basic","de":"Mein Produkt - Basic"},"SetupDescription":{"_c":"Setup fee","de":"Einrichtungsgeb�hr"},"PlanDescription":{"_c":"all basic features are included","de":"enth�lt alle basic-Funktionen"},"TrialEndPolicy":"NoTrial","TaxPolicyId":"5996a944ba5c2e08203e8f55","IsQuantityBased":false,"Hidden":false,"IsDeletable":false,"RequiresOrderApproval":false,"CustomFields":{}}],"PlanVariants":[{"Id":"5996a945ba5c2e08203e8f5a","PlanId":"5a9ff61c81b1f010e02fbe93","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":1},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":75,"SetupFee":20,"InternalName":"monatliche Laufzeit","Description":{"_c":"monthly renewal and monthly payment","de":"monatliche Laufzeit und monatliche Zahlung"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"},{"Id":"5996a945ba5c2e08203e8f5c","PlanId":"5a9ff61c81b1f010e02fbe93","EndAfterFirstContractPeriod":false,"AllowSelfService":true,"AllowWithoutPaymentData":false,"ContractPeriod":{"Unit":"Month","Quantity":1},"LaterContractPeriod":{"Unit":"Month","Quantity":1},"CancellationPeriod":{"Unit":"Month","Quantity":1},"LaterCancellationPeriod":{"Unit":"Month","Quantity":1},"BillingPeriod":{"Unit":"Month","Quantity":1},"FeePeriod":{"Unit":"Month","Quantity":12},"PaymentPeriodMode":"PrePaid","Quota":[],"RecurringFee":175,"SetupFee":25,"InternalName":"j�hrliche Laufzeit","Description":{"_c":"yearly renewal and yearly payment","de":"monatliche Laufzeit und monatliche Zahlung"},"BillingDateAlignment":"None","Hidden":false,"IsDeletable":false,"AfterFirstContractPeriodNextStep":"RenewAutomatically"}],"Components":[],"TaxPolicies":[{"Id":"5981a1e381b1fc126071dc3e","Name":"Services","IsOssApplicable":false,"Entries":[{"Country":"DE","Rate":19,"SplitOnTaxChange":false},{"Country":"EU","Rate":19,"SplitOnTaxChange":false},{"Country":"XX","Rate":0,"SplitOnTaxChange":false}]}],"Discounts":[{"Id":"5a9ff61cba5c1e154c958d17","PlanGroupId":"5a9ff61c81b1f010e02fbe91","InternalName":"Starter discount","Description":{"_c":"Starter discount"},"Duration":{"Unit":"Month","Quantity":3},"DurationType":"FixedPeriod","Effect":{"Type":"Relative","ReductionPercent":30},"Targets":{"5a9ff61cba5c1e154c958d13":true,"5a9ff61c81b1f010e02fbe95":true,"5a9ff61cba5c1e154c958d15":true,"5a9ff61c81b1f010e02fbe97":true},"IncludeSetup":false,"CreateSeparateLineItem":true,"Hidden":false,"IsDeletable":false}],"Coupons":[{"Id":"5a9ff61d81b1f010e02fbe99","PlanGroupId":"5a9ff61c81b1f010e02fbe91","Active":true,"InternalName":"Starter Coupon","Description":{"_c":"Thank you. Enjoy the Starter discount!","de":"Danke. Viel Spa� mit dem Starter-Rabatt!"},"DiscountId":"5a9ff61cba5c1e154c958d17","Enabled":true,"IsSingleUse":false,"Hidden":false}]}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/reports/{id}": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Returns a report information by Id",
        "operationId": "Reports_Get_id_GET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Creates a report",
        "operationId": "Reports_Post_id_parameters_POST",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Reporting parameters DTO",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportingParametersDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/reports/{reportId}/downloadlink": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Creates a file download token for the given report.",
        "description": "Use this method only if you need to share file with someone. For integration use /api/v1/reports/{reportid}/download",
        "operationId": "Reports_CreateDownloadLink_reportId_POST",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadLinkDTO"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/reports/{reportId}/download": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Download report file",
        "operationId": "Reports_GetDirectDownload_reportId_GET",
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "Report Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/subscriptions": {
      "get": {
        "tags": [
          "Subscriptions"
        ],
        "summary": "Retrieves combined customer and contract data",
        "operationId": "Subscriptions_GetList_ShowHidden_Search_DefaultBearerMedium_PlanGroupId_PlanId_PlanVariantId_ComponentId_ComponentUsageId_DiscountId_PaymentMethod_ContractStatus_DunningTemplateId_RecurringPayments_AutomaticBilling_PaymentEscalation_BalanceType_ContractStartFrom_ContractStartTo_ContractEndFrom_ContractEndTo_Locale_SalesEntityId_IBAN_PrepaidCardSerialNumberOrSecretCode_CustomersForDeletion_ContractsForDeletion_Customer.CustomFields_Contract.CustomFields_ComponentSubscription.CustomFields_MeteredUsage.CustomFields_DiscountSubscription.CustomFields_from_take_detailLevel_GET",
        "parameters": [
          {
            "name": "showHidden",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "defaultBearerMedium",
            "in": "query",
            "description": "Enumerates the available media for documents.",
            "schema": {
              "$ref": "#/components/schemas/BearerMedium"
            }
          },
          {
            "name": "planGroupId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planVariantId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "componentUsageId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "discountId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentMethod",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contractStatus",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ContractLifecycleStatus"
            }
          },
          {
            "name": "dunningTemplateId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recurringPayments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "automaticBilling",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "paymentEscalation",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "balanceType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ContractBalanceType"
            }
          },
          {
            "name": "contractStartFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "contractStartTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "contractEndFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "contractEndTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "locale",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesEntityId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "iBAN",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prepaidCardSerialNumberOrSecretCode",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customersForDeletion",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeletionRequestedOption"
            }
          },
          {
            "name": "contractsForDeletion",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/DeletionRequestedOption"
            }
          },
          {
            "name": "customer.customFields",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "contract.customFields",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "componentSubscription.customFields",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "meteredUsage.customFields",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "discountSubscription.customFields",
            "in": "query",
            "style": "deepObject",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Cursor from where on the items are listed",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Default = 100)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "detailLevel",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SubscriptionReadDTO"
                  }
                },
                "example": [{"Id":"5a0568b5ba5c1e07eca1a856","CustomerId":"5a0568b5ba5c1e07eca1a856","FirstName":"Karla","LastName":"Klomm","EmailAddress":"demo+karla@frisbii.com","CustomerName":"Klomm, Karla","CustomerSubName":"","Hidden":false,"IsLocked":false,"WrittenOff":false,"ContractId":"5a0568b6ba5c1e07eca1a858","ReferenceCode":"SDNJ-RLLF","LastBillingDate":"2025-08-23T11:18:58.6246780Z","NextBillingDate":"2025-09-23T11:18:58.6246956Z","PlanId":"5a0568b4ba5c1e07eca1a84e","PlanVariantId":"5a0568b5ba5c1e07eca1a850","PlanVariantName":"monatliche Laufzeit","PlanName":"My Product - Basic","Quantity":1,"LastPhaseChange":"2025-08-23T11:18:58.6247092Z","Balance":89.25,"Currency":"EUR","RecurringPaymentsPaused":true,"BillingSuspended":false,"StartDate":"2025-08-23T11:18:58.6247195Z","LifecycleStatus":"Active","IsDeletable":false},{"Id":"5a0568b581b2080940b41d32","CustomerId":"5a0568b581b2080940b41d32","FirstName":"Karl","LastName":"Klimm","EmailAddress":"demo+karl@frisbii.com","CustomerName":"Klimm, Karl","CustomerSubName":"","Hidden":false,"IsLocked":false,"WrittenOff":false,"ContractId":"5a0568b6ba5c1e07eca1a85b","ReferenceCode":"TXBY-ZJYJ","LastBillingDate":"2025-08-23T11:18:58.6247669Z","NextBillingDate":"2025-09-23T11:18:58.6247670Z","PlanId":"5a0568b481b2080940b41d29","PlanVariantId":"5a0568b5ba5c1e07eca1a852","PlanVariantName":"monatliche Laufzeit","PlanName":"My Product - Advanced","Quantity":1,"LastPhaseChange":"2025-08-23T11:18:58.6247673Z","Balance":148.75,"Currency":"EUR","RecurringPaymentsPaused":true,"BillingSuspended":false,"StartDate":"2025-08-23T11:18:58.6247675Z","LifecycleStatus":"Active","IsDeletable":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/taxdefinitions": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Retrieves a list of tax definitions.",
        "operationId": "TaxDefinitions_GetGeneric__GET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxDefinitionReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/taxpolicies": {
      "get": {
        "tags": [
          "Taxes"
        ],
        "summary": "Gets a list of tax policies.",
        "operationId": "TaxPolicies_Get_skip_take_GET",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 200
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaxPolicyReadDTO"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/webhookevents": {
      "get": {
        "tags": [
          "Webhook Events"
        ],
        "summary": "Get list of web hook events",
        "operationId": "WebhookEvents_GetList_from_dateFrom_dateTo_status_hookEvent_skip_take_isDetailed_GET",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "description": "Webhook event Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateFrom",
            "in": "query",
            "description": "Webhook event date from",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateTo",
            "in": "query",
            "description": "Webhook event date to",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Webhook event status",
            "schema": {
              "$ref": "#/components/schemas/WebhookDispatchStatus"
            }
          },
          {
            "name": "hookEvent",
            "in": "query",
            "description": "Webhook event type",
            "schema": {
              "$ref": "#/components/schemas/HookEvent"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "If you are using pagination, you can skip n items (1000 max.)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "Limit returned items (Max = 500, Default = 200)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isDetailed",
            "in": "query",
            "description": "Set true to see complete web hook event body",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookDispatchReadDTO"
                  }
                },
                "example": [{"Id":"668fceb84b1b63daebb509db","CreatedAt":"2025-08-23T13:18:58.6587849+02:00","TargetUrl":"https://webhook.site/#/your-unique-id","Event":"ContractCreated","IncludeBillwerkAuth":false,"Status":"Succeeded","AttemptCount":1,"NextAttempt":"2025-08-23T13:18:58.6589356+02:00","LastAttempt":"2025-08-23T13:18:58.6588528+02:00","Data":{"ContractId":"66eaed42513e734815ac9fcb","Event":"ContractCreated"}}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Lists all webhooks that you currently have registered",
        "operationId": "Webhooks_Get__GET",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HookReadDTO"
                  }
                },
                "example": [{"Id":"599d51f881b1f00a28f7aeb0","Url":"https://example.com/billwerk-hooks/account-hook","Events":["ContractCreated","ContractChanged","PaymentSucceeded","PaymentFailed","DebitAuthCancelled","CustomerChanged"],"IncludeBillwerkAuth":false}]
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a new webhook subscription",
        "operationId": "Webhooks_Post_hookDTO_POST",
        "requestBody": {
          "description": "Webhook subscription configuration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HookDTO"
              },
              "example": {"Url":"https://example.com/billwerk-hooks/account-hook","Events":["ContractCancelled","PaymentDataChanged","DunningCreated"],"IncludeBillwerkAuth":false}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HookReadDTO"
                },
                "example": {"Id":"599d51f881b1f00a28f7aeb0","Url":"https://example.com/billwerk-hooks/account-hook","Events":["ContractCreated","ContractChanged","PaymentSucceeded","PaymentFailed","DebitAuthCancelled","CustomerChanged"],"IncludeBillwerkAuth":false}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/webhooks/{id}": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Deletes the webhook from the system",
        "description": "Note that this will NOT stop retrying of webhooks that are already queued up!",
        "operationId": "Webhooks_Delete_id_DELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/contracts/{contractId}/writeoff": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Performs a write-off for a contract.",
        "operationId": "WriteOff_PostWriteOffContract_contractId_writeOffCreateDTO_POST",
        "parameters": [
          {
            "name": "contractId",
            "in": "path",
            "description": "Contract Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Write-off parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractWriteOffCreateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiMessage"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountExportProductType": {
        "enum": [
          "NoProduct",
          "Plan",
          "RecurringComponent",
          "MeteredUsageComponent",
          "Discount",
          "PrepaidCard"
        ],
        "type": "string"
      },
      "AccountKind": {
        "enum": [
          "Bank",
          "Receivables",
          "Revenue",
          "Deferral"
        ],
        "type": "string"
      },
      "AccountingAccountType": {
        "enum": [
          "Gross",
          "Net",
          "NoTax"
        ],
        "type": "string"
      },
      "AccountingAssignmentSettingsDTO": {
        "type": "object",
        "properties": {
          "DirectlyAssignPayments": {
            "type": "boolean"
          },
          "CreateIndirectAssignments": {
            "type": "boolean"
          },
          "IndirectAssignmentBankAccount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportBatchReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Kind": {
            "$ref": "#/components/schemas/AccountingExportKind"
          },
          "SequentialId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "NumberOfPostings": {
            "type": "integer",
            "format": "int32"
          },
          "NumberOfPostingGroups": {
            "type": "integer",
            "format": "int32"
          },
          "ExportTime": {
            "type": "string",
            "format": "date-time"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportFileReadDTO"
            },
            "nullable": true
          },
          "ExportedDateRange": {
            "$ref": "#/components/schemas/DateRangeDTO"
          },
          "PostingDateRange": {
            "$ref": "#/components/schemas/DateRangeDTO"
          }
        },
        "additionalProperties": false
      },
      "AccountingExportCreateDTO": {
        "type": "object",
        "properties": {
          "ExportedDateRange": {
            "$ref": "#/components/schemas/DateRangeDTO"
          },
          "Kind": {
            "$ref": "#/components/schemas/AccountingExportKind"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportFileCreateDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportExtraFieldDTO": {
        "type": "object",
        "properties": {
          "Output": {
            "type": "string",
            "nullable": true
          },
          "OutputTitle": {
            "type": "string",
            "nullable": true
          },
          "Input": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportFileCreateDTO": {
        "type": "object",
        "properties": {
          "Format": {
            "$ref": "#/components/schemas/AccountingExportFormat"
          }
        },
        "additionalProperties": false
      },
      "AccountingExportFileReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID.",
            "nullable": true
          },
          "ExportId": {
            "type": "string",
            "description": "ID of the export.",
            "nullable": true
          },
          "Version": {
            "type": "integer",
            "description": "Version of the file.",
            "format": "int32"
          },
          "FileTime": {
            "type": "string",
            "description": "Date where this file has been created.",
            "format": "date-time"
          },
          "Status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "Format": {
            "$ref": "#/components/schemas/AccountingExportFormat"
          }
        },
        "additionalProperties": false,
        "description": "Applying format for errors from external API regarding any payment request."
      },
      "AccountingExportFormat": {
        "enum": [
          "Datev",
          "Lexware",
          "BillwerkSap",
          "DatevExtf",
          "Ewe",
          "Pons"
        ],
        "type": "string"
      },
      "AccountingExportGeneralSettingsDTO": {
        "required": [
          "AssignmentSettings",
          "BankAccounts",
          "ExtraFieldsDebitorsDatev",
          "ExtraFieldsDebitorsLexware",
          "ExtraFieldsPostingsDatev",
          "ExtraFieldsPostingsLexware",
          "RevenueAccounts",
          "WriteOffAccounts"
        ],
        "type": "object",
        "properties": {
          "Format": {
            "$ref": "#/components/schemas/AccountingFormat"
          },
          "GeneralDebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "UsePerCustomerDebitorAccount": {
            "type": "boolean"
          },
          "FirstMonthInFiscalYear": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "DatevConsultant": {
            "maximum": 9999999,
            "minimum": 1001,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DatevClient": {
            "maximum": 99999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GeneralLedgerAccountNumberLength": {
            "maximum": 8,
            "minimum": 4,
            "type": "integer",
            "format": "int32"
          },
          "DeferralAccount": {
            "type": "string",
            "nullable": true
          },
          "DeferralTaxCode": {
            "type": "string",
            "nullable": true
          },
          "IncludeDeferrals": {
            "type": "boolean"
          },
          "PostingPerLineItem": {
            "type": "boolean"
          },
          "PostingPerLineItemForDeferrals": {
            "type": "boolean"
          },
          "IncludePayments": {
            "type": "boolean"
          },
          "AssignmentSettings": {
            "$ref": "#/components/schemas/AccountingAssignmentSettingsDTO"
          },
          "RevenueAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportReceivableGroupingSettingsDTO"
            }
          },
          "WriteOffAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportReceivableGroupingSettingsDTO"
            }
          },
          "BankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportPaymentGroupingSettingsDTO"
            }
          },
          "ExtraFieldsPostingsDatev": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsDebitorsDatev": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsPostingsLexware": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsDebitorsLexware": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "RevenueAccountType": {
            "$ref": "#/components/schemas/RevenueAccountType"
          },
          "ProductBasedSettings": {
            "$ref": "#/components/schemas/AccountingExportProductBasedGeneralSettingsDTO"
          },
          "Language": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportGeneralSettingsReadDTO": {
        "required": [
          "AssignmentSettings",
          "BankAccounts",
          "ExtraFieldsDebitorsDatev",
          "ExtraFieldsDebitorsLexware",
          "ExtraFieldsPostingsDatev",
          "ExtraFieldsPostingsLexware",
          "RevenueAccounts",
          "WriteOffAccounts"
        ],
        "type": "object",
        "properties": {
          "FinalizedDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "Format": {
            "$ref": "#/components/schemas/AccountingFormat"
          },
          "GeneralDebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "UsePerCustomerDebitorAccount": {
            "type": "boolean"
          },
          "FirstMonthInFiscalYear": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "DatevConsultant": {
            "maximum": 9999999,
            "minimum": 1001,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "DatevClient": {
            "maximum": 99999,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "GeneralLedgerAccountNumberLength": {
            "maximum": 8,
            "minimum": 4,
            "type": "integer",
            "format": "int32"
          },
          "DeferralAccount": {
            "type": "string",
            "nullable": true
          },
          "DeferralTaxCode": {
            "type": "string",
            "nullable": true
          },
          "IncludeDeferrals": {
            "type": "boolean"
          },
          "PostingPerLineItem": {
            "type": "boolean"
          },
          "PostingPerLineItemForDeferrals": {
            "type": "boolean"
          },
          "IncludePayments": {
            "type": "boolean"
          },
          "AssignmentSettings": {
            "$ref": "#/components/schemas/AccountingAssignmentSettingsDTO"
          },
          "RevenueAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportReceivableGroupingSettingsDTO"
            }
          },
          "WriteOffAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportReceivableGroupingSettingsDTO"
            }
          },
          "BankAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportPaymentGroupingSettingsDTO"
            }
          },
          "ExtraFieldsPostingsDatev": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsDebitorsDatev": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsPostingsLexware": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "ExtraFieldsDebitorsLexware": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportExtraFieldDTO"
            }
          },
          "RevenueAccountType": {
            "$ref": "#/components/schemas/RevenueAccountType"
          },
          "ProductBasedSettings": {
            "$ref": "#/components/schemas/AccountingExportProductBasedGeneralSettingsDTO"
          },
          "Language": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains General Settings(Tax Based) only"
      },
      "AccountingExportKind": {
        "enum": [
          "Export",
          "Preview"
        ],
        "type": "string"
      },
      "AccountingExportPaymentGroupingSettingsDTO": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/AccountingPaymentGroupingKeyDTO"
          },
          "Account": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportProductAccountsDTO": {
        "type": "object",
        "properties": {
          "RevenueFeeAccount": {
            "type": "string",
            "nullable": true
          },
          "WriteOffFeeAccount": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportProductBasedGeneralSettingsDTO": {
        "type": "object",
        "properties": {
          "AccountType": {
            "$ref": "#/components/schemas/AccountingAccountType"
          }
        },
        "additionalProperties": false
      },
      "AccountingExportProductSettingsDTO": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "string",
            "nullable": true
          },
          "ProductType": {
            "$ref": "#/components/schemas/AccountExportProductType"
          },
          "ProductName": {
            "type": "string",
            "nullable": true
          },
          "Recurring": {
            "$ref": "#/components/schemas/AccountingExportProductAccountsDTO"
          },
          "OneTime": {
            "$ref": "#/components/schemas/AccountingExportProductAccountsDTO"
          }
        },
        "additionalProperties": false
      },
      "AccountingExportReceivableGroupingSettingsDTO": {
        "type": "object",
        "properties": {
          "Key": {
            "$ref": "#/components/schemas/AccountingGroupingKeyDTO"
          },
          "AccountType": {
            "$ref": "#/components/schemas/AccountingAccountType"
          },
          "Account": {
            "type": "string",
            "nullable": true
          },
          "AccountVat": {
            "type": "string",
            "nullable": true
          },
          "TaxCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingExportRequestReadDTO": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "ErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "ExportedDateRange": {
            "$ref": "#/components/schemas/DateRangeDTO"
          },
          "Kind": {
            "$ref": "#/components/schemas/AccountingExportKind"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingExportFileCreateDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingFormat": {
        "enum": [
          "Datev",
          "Sap",
          "Pons"
        ],
        "type": "string"
      },
      "AccountingGroupingKeyDTO": {
        "type": "object",
        "properties": {
          "Country": {
            "type": "string",
            "nullable": true
          },
          "FallbackCountry": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "VatPercentage": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IsPrepaidCard": {
            "type": "boolean"
          },
          "IsWriteOff": {
            "type": "boolean"
          },
          "IsAvatax": {
            "type": "boolean"
          },
          "TaxDefinitionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingPaymentGroupingKeyDTO": {
        "type": "object",
        "properties": {
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PaymentProvider": {
            "$ref": "#/components/schemas/PaymentProvider"
          },
          "PaymentProviderRole": {
            "$ref": "#/components/schemas/PaymentProviderRole"
          }
        },
        "additionalProperties": false
      },
      "AccountingStatusCode": {
        "enum": [
          "Okay",
          "InternalError",
          "IncompleteConfiguration",
          "ExportInProgress"
        ],
        "type": "string"
      },
      "AccountingStatusDTO": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/AccountingStatusCode"
          },
          "LastPostingUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "CurrentExportRequest": {
            "$ref": "#/components/schemas/AccountingExportRequestReadDTO"
          }
        },
        "additionalProperties": false
      },
      "AdditionalAddressDTO": {
        "required": [
          "Country"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "nullable": true
          },
          "AddressLine1": {
            "type": "string",
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "nullable": true
          },
          "HouseNumber": {
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "Country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The 2-letter ISO country code in capital letters, e.g. DE"
          },
          "FormattedStreetAddressLine": {
            "type": "string",
            "nullable": true
          },
          "FormattedCityAddressLine": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AddressDTO": {
        "required": [
          "Country"
        ],
        "type": "object",
        "properties": {
          "AddressLine1": {
            "type": "string",
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "nullable": true
          },
          "Street": {
            "type": "string",
            "nullable": true
          },
          "HouseNumber": {
            "type": "string",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "Country": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The 2-letter ISO country code in capital letters, e.g. DE"
          },
          "FormattedStreetAddressLine": {
            "type": "string",
            "nullable": true
          },
          "FormattedCityAddressLine": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiMessage": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a message returned by the API."
      },
      "AtrigaEscalationStatusValue": {
        "enum": [
          "ToBePassed",
          "Passed",
          "PassingError",
          "Accepted",
          "PartiallyAccepted",
          "Rejected",
          "PartiallyRejected",
          "Dunning",
          "DebtCollection",
          "ClosedSuccessfully",
          "ClosedUnSuccessfully"
        ],
        "type": "string"
      },
      "AttachmentReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BearerMedium": {
        "enum": [
          "Email",
          "SnailMail",
          "ArchiveOnly",
          "EInvoicing",
          "EmailAndSnailMail"
        ],
        "type": "string",
        "description": "Enumerates the available media for documents."
      },
      "BillingDateAlignment": {
        "enum": [
          "None",
          "FixedDaily",
          "FixedMonthly"
        ],
        "type": "string"
      },
      "CancellationOutputDTO": {
        "type": "object",
        "properties": {
          "CancellationDate": {
            "type": "string",
            "description": "Date when the contract has been cancelled",
            "format": "date-time",
            "nullable": true
          },
          "NextPossibleCancellationDate": {
            "type": "string",
            "description": "Date to which you can end this contract",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Date when the Contract will end",
            "format": "date-time"
          },
          "Invoice": {
            "$ref": "#/components/schemas/InvoicePreviewDTO"
          },
          "ContractAfter": {
            "$ref": "#/components/schemas/ContractReadDTO"
          }
        },
        "additionalProperties": false
      },
      "CartDTO": {
        "type": "object",
        "properties": {
          "PlanVariantId": {
            "type": "string",
            "description": "The ID of the planvariant to subscribe to",
            "nullable": true
          },
          "PriceListId": {
            "type": "string",
            "description": "ID of the price list",
            "nullable": true
          },
          "EnableTrial": {
            "type": "boolean",
            "description": "Determines if a trial period will be enabled",
            "nullable": true
          },
          "InheritStartDate": {
            "type": "boolean"
          },
          "ComponentSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentSubscriptionCreateDTO"
            },
            "description": " An array of additional components to subscribe to. Please note that id must be billwerk' id of the component (i.e. you can't use your own id here) and that the component must not be a metered component.",
            "nullable": true
          },
          "DiscountSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountSubscriptionCreateDTO"
            },
            "description": " An array of additional discounts to subscribe to. Please note that id must be billwerk' id of the discounts (i.e. you can't use your own id here)",
            "nullable": true
          },
          "MeteredUsages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeteredUsageDTO"
            },
            "description": " An array of additional metered usages to subscribe to. Please note that id must be billwerk' id of the metered usage (i.e. you can't use your own id here)",
            "nullable": true
          },
          "RatedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatedItemCreateDTO"
            },
            "description": " An array of additional rated items to use",
            "nullable": true
          },
          "EndComponentSubscriptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": " An array of component subscriptions which will be ended",
            "nullable": true
          },
          "EndDiscountSubscriptions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": " An array of discount subscriptions which will be ended",
            "nullable": true
          },
          "DeletedMeteredUsages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "DeletedRatedItems": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "CouponCode": {
            "type": "string",
            "description": "The coupon code which will be used",
            "nullable": true
          },
          "OnAccountDueAfter": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "Trial": {
            "$ref": "#/components/schemas/TrialMode"
          }
        },
        "additionalProperties": false
      },
      "ComponentDTO": {
        "type": "object",
        "properties": {
          "AllowSelfService": {
            "type": "boolean"
          },
          "ShowSelfService": {
            "type": "boolean"
          },
          "ComponentType": {
            "$ref": "#/components/schemas/ComponentTypeDTO"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "Prorate": {
            "type": "boolean"
          },
          "PaymentPeriodMode": {
            "$ref": "#/components/schemas/PaymentPeriodMode"
          },
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Unit": {
            "type": "string",
            "nullable": true
          },
          "TaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "CostCenter": {
            "type": "string",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "PriceScale": {
            "$ref": "#/components/schemas/PriceScaleDTO"
          },
          "DiscountScale": {
            "$ref": "#/components/schemas/DiscountScaleDTO"
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IncludeInInterimBilling": {
            "type": "boolean"
          },
          "BillInTrial": {
            "type": "boolean"
          },
          "Hidden": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "HasIndependentBaseDate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ComponentOrderSelfServiceReadDTO": {
        "type": "object",
        "properties": {
          "ComponentType": {
            "$ref": "#/components/schemas/ComponentTypeDTO"
          },
          "PreventModification": {
            "type": "boolean"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "VatPercentage": {
            "type": "number",
            "format": "double"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "nullable": true
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "IsQuantityBased": {
            "type": "boolean"
          },
          "VariantName": {
            "type": "string",
            "nullable": true
          },
          "VariantDescription": {
            "type": "string",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "description": "The ID of the component to subscribe to",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Determines the quantity of subscriptions to this component",
            "format": "double"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains description of the component subscription custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComponentReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "nullable": true
          },
          "AllowSelfService": {
            "type": "boolean"
          },
          "ShowSelfService": {
            "type": "boolean"
          },
          "ComponentType": {
            "$ref": "#/components/schemas/ComponentTypeDTO"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "Prorate": {
            "type": "boolean"
          },
          "PaymentPeriodMode": {
            "$ref": "#/components/schemas/PaymentPeriodMode"
          },
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Unit": {
            "type": "string",
            "nullable": true
          },
          "TaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "CostCenter": {
            "type": "string",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "PriceScale": {
            "$ref": "#/components/schemas/PriceScaleDTO"
          },
          "DiscountScale": {
            "$ref": "#/components/schemas/DiscountScaleDTO"
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "IncludeInInterimBilling": {
            "type": "boolean"
          },
          "BillInTrial": {
            "type": "boolean"
          },
          "Hidden": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "HasIndependentBaseDate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ComponentSubscriptionChangeDetailDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "double"
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          }
        },
        "additionalProperties": false
      },
      "ComponentSubscriptionChangeDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Before": {
            "$ref": "#/components/schemas/ComponentSubscriptionChangeDetailDto"
          },
          "After": {
            "$ref": "#/components/schemas/ComponentSubscriptionChangeDetailDto"
          }
        },
        "additionalProperties": false
      },
      "ComponentSubscriptionCreateDTO": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "type": "string",
            "description": "ID of the component",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Optional - Quantity of the subscribed component",
            "format": "double",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "description": "Optional - Date where the component subscription will start. Leave empty to start immediately",
            "format": "date-time",
            "nullable": true
          },
          "BilledUntil": {
            "type": "string",
            "description": "Optional - Date until when the component subscription has been billed. Leave empty to force immediate billing",
            "format": "date-time",
            "nullable": true
          },
          "ProductOverride": {
            "$ref": "#/components/schemas/ProductOverrideDTO"
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Date where the component subscription will end",
            "format": "date-time",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo attached to the component subscription",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Component subscription custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComponentSubscriptionDTO": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "description": "Optional - Date where the component subscription will end",
            "format": "date-time",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo attached to the component subscription",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Component subscription custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComponentSubscriptionReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the customer",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "description": "ID of the component",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Quantity of the subscribed component",
            "format": "double"
          },
          "StartDate": {
            "type": "string",
            "description": "Date where the component subscription will start. Leave empty to start immediately",
            "format": "date-time"
          },
          "BilledUntil": {
            "type": "string",
            "description": "Date until when the component subscription has been billed. Leave empty to force immediate billing",
            "format": "date-time",
            "nullable": true
          },
          "ProductOverride": {
            "$ref": "#/components/schemas/ProductOverrideDTO"
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Date where the component subscription will end",
            "format": "date-time",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo attached to the component subscription",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Component subscription custom fields",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ComponentTypeDTO": {
        "enum": [
          "QuantityBased",
          "OnOff",
          "Metered"
        ],
        "type": "string"
      },
      "ContractBalanceType": {
        "enum": [
          "Credit",
          "Balanced",
          "Debit"
        ],
        "type": "string"
      },
      "ContractChangeDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/ContractChangeType"
          },
          "Trigger": {
            "$ref": "#/components/schemas/ContractChangeTrigger"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "OrderId": {
            "type": "string",
            "description": "Optional - ID of the order (if an order has caused the change)",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "ChangeDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "NewPlanVariantId": {
            "type": "string",
            "description": "Optional - points to plan active at the ChangeDate",
            "nullable": true
          },
          "NewPlanId": {
            "type": "string",
            "description": "Optional - points to plan variant active at the ChangeDate",
            "nullable": true
          },
          "Contract": {
            "$ref": "#/components/schemas/ContractStateDto"
          },
          "ComponentSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentSubscriptionChangeDto"
            },
            "nullable": true
          },
          "DiscountSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountSubscriptionChangeDto"
            },
            "nullable": true
          },
          "Pauses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPauseChangeDto"
            },
            "nullable": true
          },
          "PricePhases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricePhaseDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractChangeListsDto": {
        "type": "object",
        "properties": {
          "CurrentPhase": {
            "$ref": "#/components/schemas/ContractPhaseDTO"
          },
          "Phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPhaseDTO"
            },
            "nullable": true
          },
          "CurrentPause": {
            "$ref": "#/components/schemas/ContractPauseDTO"
          }
        },
        "additionalProperties": false
      },
      "ContractChangePaymentMethodDTO": {
        "type": "object",
        "properties": {
          "SelectedPaymentMethod": {
            "type": "string",
            "nullable": true
          },
          "Bearer": {
            "$ref": "#/components/schemas/PSPBearerDTO"
          }
        },
        "additionalProperties": false
      },
      "ContractChangeRequestOption": {
        "enum": [
          "None",
          "Changed",
          "All"
        ],
        "type": "string"
      },
      "ContractChangeTrigger": {
        "enum": [
          "PaymentEscalation",
          "SelfService",
          "InsufficientBalance",
          "ExternalSubscriptionSync"
        ],
        "type": "string"
      },
      "ContractChangeType": {
        "enum": [
          "Signup",
          "Upgrade",
          "EndContract",
          "Annulation",
          "ExternalSubscriptionSync",
          "Pause",
          "Resume",
          "TrialEndChange",
          "ComponentSubscriptionChange",
          "DiscountSubscriptionChange",
          "Timebased"
        ],
        "type": "string"
      },
      "ContractEndDTO": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "description": "End the contract to this date.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractLifecycleStatus": {
        "enum": [
          "Undefined",
          "Draft",
          "InOrderProcess",
          "InTrial",
          "TrialExpired",
          "Active",
          "Ended",
          "TemporarilyInactive",
          "Annulled",
          "Locked",
          "Paused",
          "Cancelled",
          "WrittenOff"
        ],
        "type": "string"
      },
      "ContractMoveDTO": {
        "type": "object",
        "properties": {
          "CustomerId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractPauseChangeDetailDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractPauseChangeDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Before": {
            "$ref": "#/components/schemas/ContractPauseChangeDetailDto"
          },
          "After": {
            "$ref": "#/components/schemas/ContractPauseChangeDetailDto"
          }
        },
        "additionalProperties": false
      },
      "ContractPauseCreateDTO": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Startdate of contractpause.\nWhen this is null, the current time is used (start of current day when daily billing precision is used).",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Enddate of contractpause.\nWhen this is null, no end date is added.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractPauseDTO": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Startdate of contractpause.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Enddate of contractpause.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractPauseOutputDTO": {
        "type": "object",
        "properties": {
          "PauseDate": {
            "type": "string",
            "description": "Date when the contract has been paused",
            "format": "date-time",
            "nullable": true
          },
          "PauseStart": {
            "type": "string",
            "description": "Date when the Pause will start",
            "format": "date-time",
            "nullable": true
          },
          "PauseEnd": {
            "type": "string",
            "description": "Date when the Pause will end",
            "format": "date-time",
            "nullable": true
          },
          "Invoice": {
            "$ref": "#/components/schemas/InvoicePreviewDTO"
          }
        },
        "additionalProperties": false
      },
      "ContractPaymentDTO": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the payment",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "description": "Currency of the payment, e.g. \"EUR\"",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the payment",
            "nullable": true
          },
          "RecurringPaymentsOff": {
            "type": "boolean",
            "description": "De-/Activate recurring payments"
          },
          "BookingDate": {
            "type": "string",
            "description": "Optional - Set to register this payment on a specific date. Leave empty to book now",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "ContractPhaseDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ContractPhaseType"
          },
          "StartDate": {
            "type": "string",
            "description": "Starting date of the contractphase.",
            "format": "date-time"
          },
          "PlanVariantId": {
            "type": "string",
            "description": "ID of the PlanVariant.",
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the Plan.",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "InheritStartDate": {
            "type": "boolean"
          },
          "ExternalBillingReceiptId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ExternalBillingType": {
            "$ref": "#/components/schemas/ExternalSubscriptionType"
          }
        },
        "additionalProperties": false
      },
      "ContractPhaseType": {
        "enum": [
          "Inactive",
          "Normal",
          "Trial"
        ],
        "type": "string"
      },
      "ContractReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID.",
            "nullable": true
          },
          "LastBillingDate": {
            "type": "string",
            "description": "Date where the last billing has happened.",
            "format": "date-time",
            "nullable": true
          },
          "NextBillingDate": {
            "type": "string",
            "description": "Date when the next billing will happen.",
            "format": "date-time",
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the Plan in currently active phase.",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the Customer.",
            "nullable": true
          },
          "LifecycleStatus": {
            "$ref": "#/components/schemas/ContractLifecycleStatus"
          },
          "TrialEndDate": {
            "type": "string",
            "description": "Date when the trial phase will end.",
            "format": "date-time",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "description": "Name of the Customer.",
            "nullable": true
          },
          "CustomerIsLocked": {
            "type": "boolean",
            "description": "Determines if the Customer is locked."
          },
          "Phases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContractPhaseDTO"
            },
            "description": "List of ContractPhases.",
            "nullable": true
          },
          "Balance": {
            "type": "number",
            "description": "Balance of the Contract.",
            "format": "double"
          },
          "ReferenceCode": {
            "type": "string",
            "description": "Reference code of the Contract.",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "description": "Currency of the Contract.",
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the PlanGroup.",
            "nullable": true
          },
          "PriceListId": {
            "type": "string",
            "description": "ID of the PriceList.",
            "nullable": true
          },
          "PaymentBearer": {
            "$ref": "#/components/schemas/IPaymentBearerDTO"
          },
          "PaymentProvider": {
            "type": "string",
            "description": "Used payment provider.",
            "nullable": true
          },
          "PaymentProviderRole": {
            "type": "string",
            "description": "Used payment provider role.",
            "nullable": true
          },
          "InitialPaymentProviderRole": {
            "type": "string",
            "description": "Used initial payment provider role.",
            "nullable": true
          },
          "EscalationSuspended": {
            "type": "boolean",
            "description": "Determines if the escalation is suspended."
          },
          "RecurringPaymentsPaused": {
            "type": "boolean",
            "description": "Determines if recurring payments are paused."
          },
          "CurrentPhase": {
            "$ref": "#/components/schemas/CurrentContractPhaseDTO"
          },
          "PaymentProviderSupportRefunds": {
            "type": "boolean",
            "description": "Determines if the payment provider supports refunds."
          },
          "CurrentDunning": {
            "$ref": "#/components/schemas/LedgerDunningReadDTO"
          },
          "BillingSuspended": {
            "type": "boolean",
            "description": "Determines if the billing is suspended."
          },
          "ThresholdBillingDisabled": {
            "type": "boolean",
            "description": "Determines if the threshold billing is disabled."
          },
          "PrepaidCardsAmountRemaining": {
            "type": "number",
            "description": "Amount remained on prepaid cards.",
            "format": "double",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "description": "ID of the external Contract.",
            "nullable": true
          },
          "SalesEntityId": {
            "type": "string",
            "description": "ID of the sales entity.",
            "nullable": true
          },
          "DeletionRequestedAt": {
            "type": "string",
            "description": "The date when deletion has been requested.",
            "format": "date-time",
            "nullable": true
          },
          "AdditionalAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalAddressDTO"
            },
            "description": "Customers additional addresses",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "description": "Optional - Date when the Contract starts.",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Date when the Contract ends.",
            "format": "date-time",
            "nullable": true
          },
          "BilledUntil": {
            "type": "string",
            "description": "Optional - Date until when the Contract has been billed.",
            "format": "date-time",
            "nullable": true
          },
          "PlanVariantId": {
            "type": "string",
            "description": "ID of the PlanVariant.",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "description": "Contains previously set notes.",
            "nullable": true
          },
          "PaymentMethod": {
            "type": "string",
            "description": "Used payment method.",
            "nullable": true
          },
          "MandateReference": {
            "type": "string",
            "description": "Mandat reference - in case of direct debit.",
            "nullable": true
          },
          "MandateSignatureDate": {
            "type": "string",
            "description": "Date of signing the mandate.",
            "format": "date-time",
            "nullable": true
          },
          "DestinationCountry": {
            "type": "string",
            "description": "Contract destination country.",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom fields of the Contract.",
            "nullable": true
          },
          "OnAccountDueAfter": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "ShippingAddressId": {
            "type": "string",
            "description": "Shipping address Id",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractRefundDTO": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the refund",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ContractRefundResultDTO": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the refund",
            "format": "double"
          },
          "RefundedAmount": {
            "type": "number",
            "description": "Actual amount which has been refunded",
            "format": "double"
          },
          "Error": {
            "type": "string",
            "description": "Error in case of failed or partial refund",
            "nullable": true
          },
          "IsPspError": {
            "type": "boolean",
            "description": "Is error caused by PSP"
          }
        },
        "additionalProperties": false
      },
      "ContractResumeDTO": {
        "type": "object",
        "properties": {
          "ResumeDate": {
            "type": "string",
            "description": "ResumeDate of Pause.\nWhen this is null, the current time is used (start of current day when daily billing precision is used).",
            "format": "date-time",
            "nullable": true
          },
          "PauseId": {
            "type": "string",
            "description": "Id of Contract Pause",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractStateDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Before": {
            "$ref": "#/components/schemas/ContractChangeListsDto"
          },
          "After": {
            "$ref": "#/components/schemas/ContractChangeListsDto"
          }
        },
        "additionalProperties": false
      },
      "ContractSubscriptionsDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID"
          },
          "Phase": {
            "$ref": "#/components/schemas/CurrentContractPhaseDTO"
          },
          "ComponentSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentSubscriptionReadDTO"
            },
            "description": "List of subscribed components",
            "nullable": true
          },
          "DiscountSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
            },
            "description": "List of subscribed discounts",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContractWriteOffCreateDTO": {
        "type": "object",
        "properties": {
          "BookingDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "Country": {
        "type": "object",
        "properties": {
          "TwoLetterCode": {
            "type": "string",
            "nullable": true
          },
          "ThreeLetterCode": {
            "type": "string",
            "nullable": true
          },
          "DE": {
            "type": "string",
            "nullable": true
          },
          "EN": {
            "type": "string",
            "nullable": true
          },
          "EN_POST": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CouponDTO": {
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized descriptions",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "description": "Date from where on the coupon is valid",
            "format": "date-time",
            "nullable": true
          },
          "ValidUntil": {
            "type": "string",
            "description": "Date until the coupon is valid",
            "format": "date-time",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean",
            "description": "Determines if the coupon is enabled and can be used"
          },
          "Codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contains codes which can be used for this coupon",
            "nullable": true
          },
          "IsSingleUse": {
            "type": "boolean",
            "description": "Determines if the coupon is single use only"
          }
        },
        "additionalProperties": false
      },
      "CouponOrderDTO": {
        "type": "object",
        "properties": {
          "CouponCode": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "CouponId": {
            "type": "string",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "ErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "ErrorCode": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DiscountDescription": {
            "type": "string",
            "nullable": true
          },
          "AppliesToCart": {
            "type": "boolean",
            "description": "Determines if coupon is applicable. Has true value if discount applies to any products within the cart and false value if does not",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CouponReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "nullable": true
          },
          "Active": {
            "type": "boolean",
            "description": "Determines if the coupon has been used"
          },
          "UsedCodes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized descriptions",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "ValidFrom": {
            "type": "string",
            "description": "Date from where on the coupon is valid",
            "format": "date-time",
            "nullable": true
          },
          "ValidUntil": {
            "type": "string",
            "description": "Date until the coupon is valid",
            "format": "date-time",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean",
            "description": "Determines if the coupon is enabled and can be used"
          },
          "Codes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Contains codes which can be used for this coupon",
            "nullable": true
          },
          "IsSingleUse": {
            "type": "boolean",
            "description": "Determines if the coupon is single use only"
          }
        },
        "additionalProperties": false
      },
      "CurrentContractPhaseDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ContractPhaseType"
          },
          "StartDate": {
            "type": "string",
            "description": "Optional. Date when the Contractphase starts. It also marks the end date of the previous phase, if one exists.",
            "format": "date-time",
            "nullable": true
          },
          "PlanVariantId": {
            "type": "string",
            "description": "ID of the PlanVariant.",
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the Plan.",
            "nullable": true
          },
          "Quantity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "InheritStartDate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CustomerDTO": {
        "type": "object",
        "properties": {
          "ExternalCustomerId": {
            "type": "string",
            "description": "Unique external Id, e.g. foreign key",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Customers company name",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "Customers first name",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Customers last name",
            "nullable": true
          },
          "VatId": {
            "type": "string",
            "description": "Will be validated if given",
            "nullable": true
          },
          "EInvoicingId": {
            "type": "string",
            "description": "Customer e-invoicing ID",
            "nullable": true
          },
          "EInvoicingNetworkId": {
            "type": "string",
            "description": "Customer e-invoicing network ID",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "description": "Customers emailaddress",
            "nullable": true
          },
          "AdditionalEmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressAssignmentDTO"
            },
            "description": "Customers additional emailaddresses",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Customers phonenumber",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "description": "Customers notes",
            "nullable": true
          },
          "Tag": {
            "type": "string",
            "description": "Customers tag",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "AdditionalAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalAddressDTO"
            },
            "description": "Customers additional addresses",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "description": "Customers locale",
            "nullable": true
          },
          "DestinationCountry": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The 2-letter ISO country code in capital letters, e.g. DE",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Customers customfields",
            "nullable": true
          },
          "DefaultBearerMedium": {
            "$ref": "#/components/schemas/BearerMedium"
          },
          "BirthDate": {
            "type": "string",
            "description": "The birthdate. The date must be between January 1, 1900, and yesterday's date.\nOptional.",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "VatIdValidationStatus": {
            "$ref": "#/components/schemas/VatIdValidationStatus"
          },
          "InvoiceAttachmentFormat": {
            "$ref": "#/components/schemas/PdfDocumentFormat"
          },
          "LastValidationDate": {
            "type": "string",
            "description": "Date of last validation if VAT ID is given",
            "format": "date-time",
            "nullable": true
          },
          "BuyerReference": {
            "type": "string",
            "description": "Used to identify the invoice recipient",
            "nullable": true
          },
          "EntityUseCode": {
            "type": "string",
            "description": "Entity use code is used for tax exemption in external tax services",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "ID of the customer",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "description": "Date of creation",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "description": "Date of deletion",
            "format": "date-time",
            "nullable": true
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Determines if the customer is locked"
          },
          "DeletionRequestedAt": {
            "type": "string",
            "description": "Deletion requested at",
            "format": "date-time",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "description": "Returns CompanyName or 'LastName, FirstName' or EmailAddress",
            "nullable": true,
            "readOnly": true
          },
          "CustomerSubName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ExternalCustomerId": {
            "type": "string",
            "description": "Unique external Id, e.g. foreign key",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Customers company name",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "Customers first name",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Customers last name",
            "nullable": true
          },
          "VatId": {
            "type": "string",
            "description": "Will be validated if given",
            "nullable": true
          },
          "EInvoicingId": {
            "type": "string",
            "description": "Customer e-invoicing ID",
            "nullable": true
          },
          "EInvoicingNetworkId": {
            "type": "string",
            "description": "Customer e-invoicing network ID",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "description": "Customers emailaddress",
            "nullable": true
          },
          "AdditionalEmailAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressAssignmentDTO"
            },
            "description": "Customers additional emailaddresses",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Customers phonenumber",
            "nullable": true
          },
          "Notes": {
            "type": "string",
            "description": "Customers notes",
            "nullable": true
          },
          "Tag": {
            "type": "string",
            "description": "Customers tag",
            "nullable": true
          },
          "Address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "AdditionalAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdditionalAddressDTO"
            },
            "description": "Customers additional addresses",
            "nullable": true
          },
          "Locale": {
            "type": "string",
            "description": "Customers locale",
            "nullable": true
          },
          "DestinationCountry": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "description": "The 2-letter ISO country code in capital letters, e.g. DE",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Customers customfields",
            "nullable": true
          },
          "DefaultBearerMedium": {
            "$ref": "#/components/schemas/BearerMedium"
          },
          "BirthDate": {
            "type": "string",
            "description": "The birthdate. The date must be between January 1, 1900, and yesterday's date.\nOptional.",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "VatIdValidationStatus": {
            "$ref": "#/components/schemas/VatIdValidationStatus"
          },
          "InvoiceAttachmentFormat": {
            "$ref": "#/components/schemas/PdfDocumentFormat"
          },
          "LastValidationDate": {
            "type": "string",
            "description": "Date of last validation if VAT ID is given",
            "format": "date-time",
            "nullable": true
          },
          "BuyerReference": {
            "type": "string",
            "description": "Used to identify the invoice recipient",
            "nullable": true
          },
          "EntityUseCode": {
            "type": "string",
            "description": "Entity use code is used for tax exemption in external tax services",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomerStatus": {
        "enum": [
          "Normal",
          "Unconfirmed",
          "Deleted"
        ],
        "type": "string"
      },
      "DashboardStatsDTO": {
        "type": "object",
        "properties": {
          "PlanGroupKPI": {
            "$ref": "#/components/schemas/PlanGroupKPIDTO"
          }
        },
        "additionalProperties": false
      },
      "DateRangeDTO": {
        "type": "object",
        "properties": {
          "Start": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "ExclusiveEnd": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "InclusiveEnd": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "DeletionRequestedOption": {
        "enum": [
          "IncludeMarked",
          "ExcludeMarked",
          "OnlyMarked"
        ],
        "type": "string"
      },
      "DiscountDTO": {
        "required": [
          "Effect",
          "Targets"
        ],
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "string",
            "description": "Internal name of the discount",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Description of the discount. Will appear on the invoice",
            "nullable": true
          },
          "Duration": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "DurationType": {
            "$ref": "#/components/schemas/DiscountDurationType"
          },
          "Effect": {
            "$ref": "#/components/schemas/DiscountEffectDTO"
          },
          "Targets": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Targets of the discount, e.g. an Id of a planvariant"
          },
          "IncludeSetup": {
            "type": "boolean",
            "description": "Determines if the discount will also reduce the price of the setup fee"
          },
          "CreateSeparateLineItem": {
            "type": "boolean",
            "description": "Determines if the discount will appear as separate lineitem on the invoice"
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DiscountDurationType": {
        "enum": [
          "Unlimited",
          "FirstContractPeriod",
          "FixedPeriod"
        ],
        "type": "string"
      },
      "DiscountEffectDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/DiscountEffectType"
          },
          "ReductionPercent": {
            "type": "number",
            "description": "Percentage of reduction",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DiscountEffectType": {
        "enum": [
          "Relative"
        ],
        "type": "string"
      },
      "DiscountReadDTO": {
        "required": [
          "Effect",
          "Targets"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the plangroup",
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "description": "Internal name of the discount",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Description of the discount. Will appear on the invoice",
            "nullable": true
          },
          "Duration": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "DurationType": {
            "$ref": "#/components/schemas/DiscountDurationType"
          },
          "Effect": {
            "$ref": "#/components/schemas/DiscountEffectDTO"
          },
          "Targets": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "Targets of the discount, e.g. an Id of a planvariant"
          },
          "IncludeSetup": {
            "type": "boolean",
            "description": "Determines if the discount will also reduce the price of the setup fee"
          },
          "CreateSeparateLineItem": {
            "type": "boolean",
            "description": "Determines if the discount will appear as separate lineitem on the invoice"
          },
          "Notes": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "DiscountScaleDTO": {
        "type": "object",
        "properties": {
          "IsCumulative": {
            "type": "boolean"
          },
          "BasePricePerUnit": {
            "type": "number",
            "format": "double"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountScaleItemDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountScaleItemDTO": {
        "type": "object",
        "properties": {
          "From": {
            "type": "number",
            "format": "double"
          },
          "Value": {
            "maximum": 100,
            "minimum": 0,
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DiscountSubscriptionChangeDetailDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "EndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/SubscriptionStatus"
          }
        },
        "additionalProperties": false
      },
      "DiscountSubscriptionChangeDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Before": {
            "$ref": "#/components/schemas/DiscountSubscriptionChangeDetailDto"
          },
          "After": {
            "$ref": "#/components/schemas/DiscountSubscriptionChangeDetailDto"
          }
        },
        "additionalProperties": false
      },
      "DiscountSubscriptionCreateDTO": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Optional - Startdate of the discountsubscription. Leave empty to subscribe immediately",
            "format": "date-time",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "description": "ID of the discount which will be subscribed to",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Discount subscription custom fields",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Enddate of the discountsubscription ",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountSubscriptionDTO": {
        "type": "object",
        "properties": {
          "EndDate": {
            "type": "string",
            "description": "Optional - Enddate of the discountsubscription ",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DiscountSubscriptionReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "CouponCode": {
            "type": "string",
            "description": "Used Couponcode",
            "nullable": true
          },
          "CouponId": {
            "type": "string",
            "description": "ID of the coupon",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "description": "ID of the discount which will be subscribed to",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Discount subscription custom fields",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Enddate of the discountsubscription ",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DunningDetailDTO": {
        "type": "object",
        "properties": {
          "SenderName": {
            "type": "string",
            "nullable": true
          },
          "SenderAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "SenderVatId": {
            "type": "string",
            "nullable": true
          },
          "SenderTaxNumber": {
            "type": "string",
            "nullable": true
          },
          "RecipientVatId": {
            "type": "string",
            "nullable": true
          },
          "RecipientTaxNumber": {
            "type": "string",
            "nullable": true
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DunningItemDTO"
            },
            "nullable": true
          },
          "Prologue": {
            "type": "string",
            "nullable": true
          },
          "Epilogue": {
            "type": "string",
            "nullable": true
          },
          "Headline": {
            "type": "string",
            "nullable": true
          },
          "BearerMedium": {
            "$ref": "#/components/schemas/BearerMedium"
          },
          "FormattedRecipientAddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          },
          "DunningNumber": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "RecipientName": {
            "type": "string",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "DocumentTemplateId": {
            "type": "string",
            "nullable": true
          },
          "DunningTemplateName": {
            "type": "string",
            "nullable": true
          },
          "Total": {
            "type": "number",
            "format": "double"
          },
          "ExternalCustomerId": {
            "type": "string",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "DocumentDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "DunningItemDTO": {
        "type": "object",
        "properties": {
          "InvoiceId": {
            "type": "string",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "format": "date-time"
          },
          "Total": {
            "type": "number",
            "format": "double"
          },
          "Remaining": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DunningListDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "DunningNumber": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "RecipientName": {
            "type": "string",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "DocumentTemplateId": {
            "type": "string",
            "nullable": true
          },
          "DunningTemplateName": {
            "type": "string",
            "nullable": true
          },
          "Total": {
            "type": "number",
            "format": "double"
          },
          "ExternalCustomerId": {
            "type": "string",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "DocumentDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "EInvoicingDispatchStatus": {
        "enum": [
          "ToBeSent",
          "Initiated",
          "Pending",
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      },
      "EmailAddressAssignmentDTO": {
        "type": "object",
        "properties": {
          "EmailAddress": {
            "type": "string",
            "description": "Customers emailaddress",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailAddressDTO": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Address": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailAttachmentDTO": {
        "type": "object",
        "properties": {
          "ContentType": {
            "type": "string",
            "nullable": true
          },
          "FileName": {
            "type": "string",
            "nullable": true
          },
          "FileSize": {
            "type": "string",
            "nullable": true
          },
          "AttachmentId": {
            "type": "string",
            "nullable": true
          },
          "FileId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailDeliveryErrorDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/EmailDeliveryErrorType"
          },
          "ProviderErrorCode": {
            "type": "string",
            "nullable": true
          },
          "ProviderData": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EmailDeliveryErrorType": {
        "enum": [
          "Bounce",
          "Blocked",
          "Spam"
        ],
        "type": "string"
      },
      "EmailMessageReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/EmailStatus"
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "Attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAttachmentDTO"
            },
            "nullable": true
          },
          "NotificationsAttachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentReadDTO"
            },
            "nullable": true
          },
          "DeliveryErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailDeliveryErrorDTO"
            },
            "nullable": true
          },
          "NotificationTemplateId": {
            "type": "string",
            "nullable": true
          },
          "NotificationTemplateName": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "From": {
            "$ref": "#/components/schemas/EmailAddressDTO"
          },
          "To": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressDTO"
            },
            "nullable": true
          },
          "Cc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressDTO"
            },
            "nullable": true
          },
          "Bcc": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailAddressDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailResendDTO": {
        "type": "object",
        "properties": {
          "NewEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "OldEmailAddress": {
            "type": "string",
            "nullable": true
          },
          "UpdateCustomer": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "EmailStatus": {
        "enum": [
          "Draft",
          "ToBeSent",
          "Sent",
          "Error",
          "APIError",
          "Delivered",
          "Undelivered"
        ],
        "type": "string"
      },
      "EmptyResult": {
        "type": "object",
        "additionalProperties": false
      },
      "EscalationResetParametersDTO": {
        "type": "object",
        "properties": {
          "HardResetAtriga": {
            "type": "boolean"
          },
          "Comment": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EscalationSuspendedDTO": {
        "type": "object",
        "properties": {
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "EscalationSuspended": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ExtendedPostingDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Posting": {
            "$ref": "#/components/schemas/PostingDTO"
          },
          "Group": {
            "$ref": "#/components/schemas/PostingGroupDTO"
          },
          "SequentialId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "TaxKind": {
            "$ref": "#/components/schemas/TaxKind"
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "AssignedDocumentNumber": {
            "type": "string",
            "nullable": true
          },
          "EndPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostingEndPointDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionBearerCreateDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ExternalSubscriptionType"
          },
          "AmazonIapReceiptId": {
            "type": "string",
            "nullable": true
          },
          "AmazonIapUserId": {
            "type": "string",
            "nullable": true
          },
          "AppleIapReceipt": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapPackageName": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapToken": {
            "type": "string",
            "nullable": true
          },
          "RokuPayTransactionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionCartDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "#/components/schemas/ExternalSubscriptionType"
          },
          "AmazonIapReceiptId": {
            "type": "string",
            "nullable": true
          },
          "AmazonIapUserId": {
            "type": "string",
            "nullable": true
          },
          "AppleIapReceipt": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapPackageName": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "GoogleIapToken": {
            "type": "string",
            "nullable": true
          },
          "RokuPayTransactionId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionCheckDTO": {
        "type": "object",
        "properties": {
          "Subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalSubscriptionCheckSubscriptionDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionCheckSubscriptionDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Environment": {
            "$ref": "#/components/schemas/ExternalSubscriptionEnvironment"
          },
          "Contract": {
            "$ref": "#/components/schemas/ExternalSubscriptionContractDTO"
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionContractDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExternalSubscriptionEnvironment": {
        "enum": [
          "Sandbox",
          "Production"
        ],
        "type": "string"
      },
      "ExternalSubscriptionType": {
        "enum": [
          "AmazonIap",
          "AppleIap",
          "GoogleIap",
          "RokuPay"
        ],
        "type": "string"
      },
      "FileDownloadLinkDTO": {
        "type": "object",
        "properties": {
          "Url": {
            "type": "string",
            "description": "URL",
            "nullable": true
          },
          "Expiry": {
            "type": "string",
            "description": "Expiry date",
            "format": "date-time"
          },
          "Filename": {
            "type": "string",
            "description": "Optional - Name of the file",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FreeQuotaDescriptorDTO": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "type": "string",
            "nullable": true
          },
          "ComponentName": {
            "type": "string",
            "nullable": true
          },
          "Quota": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "HookAuthType": {
        "enum": [
          "NoAuth",
          "Basic",
          "Azure"
        ],
        "type": "string"
      },
      "HookAuthorizationDTO": {
        "type": "object",
        "properties": {
          "AuthType": {
            "$ref": "#/components/schemas/HookAuthType"
          }
        },
        "additionalProperties": false
      },
      "HookDTO": {
        "required": [
          "Events",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Url": {
            "minLength": 1,
            "type": "string",
            "description": "URL where the subscribed events will be sent to"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HookEvent"
            },
            "description": "List of subscribable webhook events"
          },
          "Authorization": {
            "$ref": "#/components/schemas/HookAuthorizationDTO"
          }
        },
        "additionalProperties": false
      },
      "HookEvent": {
        "enum": [
          "AccountCreated",
          "PaymentSucceeded",
          "PaymentFailed",
          "ContractChanged",
          "DebitAuthCancelled",
          "CustomerChanged",
          "PaymentEscalated",
          "PaymentBearerExpiring",
          "RecurringBillingApproaching",
          "InvoiceCreated",
          "PaymentRegistered",
          "DunningCreated",
          "PaymentProcessStatusChanged",
          "TrialEndApproaching",
          "ContractCancelled",
          "OrderSucceeded",
          "PaymentDataChanged",
          "PaymentEscalationReset",
          "PaymentBearerExpired",
          "InvoiceCorrected",
          "ContractCreated",
          "CustomerDeleted",
          "CustomerCreated",
          "ReportSucceeded",
          "ReportFailed",
          "AcctExportSucceeded",
          "AcctExportFailed",
          "CustomerLocked",
          "CustomerUnlocked",
          "AccountingExportFileCreated",
          "PlanCreated",
          "PlanChanged",
          "PlanDeleted",
          "PlanVariantCreated",
          "PlanVariantChanged",
          "PlanVariantDeleted",
          "ComponentCreated",
          "ComponentChanged",
          "ComponentDeleted",
          "InsufficientBalanceForNextBilling",
          "AutomaticDowngradeInsufficientBalance",
          "ContractDataChanged",
          "ContractDeleted",
          "PaymentsExportFileCreated",
          "ContractWrittenOff",
          "PaymentDebtCollectionStatusChanged",
          "PaymentStatusChanged"
        ],
        "type": "string"
      },
      "HookReadDTO": {
        "required": [
          "Events",
          "Url"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "Url": {
            "minLength": 1,
            "type": "string",
            "description": "URL where the subscribed events will be sent to"
          },
          "Events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HookEvent"
            },
            "description": "List of subscribable webhook events"
          },
          "Authorization": {
            "$ref": "#/components/schemas/HookAuthorizationDTO"
          }
        },
        "additionalProperties": false
      },
      "IPaymentBearerDTO": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "The payment bearer type. Mandatory",
            "nullable": true,
            "readOnly": true
          },
          "Country": {
            "type": "string",
            "description": "The country two-letter code. Optional\n    ISO 3166 alpha-2 format",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents detailed data required for payment"
      },
      "InvoiceBuilderDTO": {
        "required": [
          "ItemList"
        ],
        "type": "object",
        "properties": {
          "BillingDate": {
            "type": "string",
            "description": "Invoice billing date",
            "format": "date-time",
            "nullable": true
          },
          "Prologue": {
            "type": "string",
            "nullable": true
          },
          "Epilogue": {
            "type": "string",
            "nullable": true
          },
          "DeliveryPeriodStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "DeliveryPeriodEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceBuilderLineItemDTO"
            }
          }
        },
        "additionalProperties": false
      },
      "InvoiceBuilderLineItemDTO": {
        "required": [
          "TaxPolicyId"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "format": "double"
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double"
          },
          "TaxPolicyId": {
            "minLength": 1,
            "type": "string"
          },
          "ProductDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceDetailDTO": {
        "type": "object",
        "properties": {
          "ContractReferenceCode": {
            "type": "string",
            "nullable": true
          },
          "SenderName": {
            "type": "string",
            "nullable": true
          },
          "SenderAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "CustomerIsLocked": {
            "type": "boolean"
          },
          "SenderVatId": {
            "type": "string",
            "nullable": true
          },
          "SenderTaxNumber": {
            "type": "string",
            "nullable": true
          },
          "RecipientVatId": {
            "type": "string",
            "nullable": true
          },
          "RecipientTaxNumber": {
            "type": "string",
            "nullable": true
          },
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "nullable": true
          },
          "Prologue": {
            "type": "string",
            "nullable": true
          },
          "Epilogue": {
            "type": "string",
            "nullable": true
          },
          "DeliveryPeriodStart": {
            "type": "string",
            "format": "date-time"
          },
          "DeliveryPeriodEnd": {
            "type": "string",
            "format": "date-time"
          },
          "VatDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatDescriptorDTO"
            },
            "nullable": true
          },
          "BearerMedium": {
            "$ref": "#/components/schemas/BearerMedium"
          },
          "ReverseCharge": {
            "type": "boolean"
          },
          "TaxExemptionNotice": {
            "type": "string",
            "nullable": true
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "PaymentBearer": {
            "$ref": "#/components/schemas/IPaymentBearerDTO"
          },
          "PrepaidCardItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrepaidCardLineItemReadDTO"
            },
            "nullable": true
          },
          "UsedCredit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AmountPayable": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Multiple": {
            "type": "boolean"
          },
          "TaxServiceTransactionCode": {
            "type": "string",
            "nullable": true
          },
          "ExternalTaxCalculation": {
            "type": "string",
            "nullable": true
          },
          "FormattedRecipientAddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "description": "Date where the invoice has been sent to the recipient",
            "format": "date-time"
          },
          "DueDate": {
            "type": "string",
            "description": "Date where the invoice is due",
            "format": "date-time",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "description": "Date where the invoice has been created",
            "format": "date-time"
          },
          "RecipientName": {
            "type": "string",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "ExternalCustomerId": {
            "type": "string",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "DocumentDate": {
            "type": "string",
            "format": "date",
            "example": "2025-08-23"
          },
          "EInvoicingDispatchStatus": {
            "$ref": "#/components/schemas/EInvoicingDispatchStatus"
          },
          "EInvoicingLastPolledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoiceDraftDTO": {
        "type": "object",
        "properties": {
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "RecipientVatId": {
            "type": "string",
            "description": "Recipients vat ID",
            "nullable": true
          },
          "Language": {
            "type": "string",
            "nullable": true
          },
          "ReverseCharge": {
            "type": "boolean",
            "description": "Determines if the invoice draft is reverse charge"
          },
          "TaxExemptionNotice": {
            "type": "string",
            "nullable": true
          },
          "InvoiceTemplateId": {
            "type": "string",
            "description": "Determines the used invoice template",
            "nullable": true
          },
          "DeliveryPeriodStart": {
            "type": "string",
            "description": "Determines the delivery period start",
            "format": "date-time"
          },
          "DeliveryPeriodEnd": {
            "type": "string",
            "description": "Determines the delivery period start",
            "format": "date-time"
          },
          "SequenceId": {
            "type": "string",
            "nullable": true
          },
          "Prologue": {
            "type": "string",
            "description": "Contains the prologue",
            "nullable": true
          },
          "Epilogue": {
            "type": "string",
            "description": "Contains the epilogue",
            "nullable": true
          },
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "description": "Contains the line items",
            "nullable": true
          },
          "InvoiceId": {
            "type": "string",
            "description": "ID of the invoice",
            "nullable": true
          },
          "VatDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatDescriptorDTO"
            },
            "description": "Contains description of the applied vat",
            "nullable": true
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "PrepaidCardItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrepaidCardLineItemReadDTO"
            },
            "nullable": true
          },
          "UsedCredit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "AmountPayable": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "BearerMedium": {
            "$ref": "#/components/schemas/BearerMedium"
          },
          "Multiple": {
            "type": "boolean"
          },
          "FormattedRecipientAddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "Id": {
            "type": "string",
            "description": "ID of the invoice draft",
            "nullable": true
          },
          "RecipientName": {
            "type": "string",
            "description": "Recipients name",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "description": "Determines the date the invoice draft has been created",
            "format": "date-time"
          },
          "Currency": {
            "type": "string",
            "description": "Invoicedrafts currency",
            "nullable": true
          },
          "TotalGross": {
            "type": "number",
            "description": "Total gross amount",
            "format": "double"
          },
          "TotalNet": {
            "type": "number",
            "description": "Total net amount",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double"
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the affected customer",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the affected contract",
            "nullable": true
          },
          "ExternalCustomerId": {
            "type": "string",
            "description": "External ID of the affected customer",
            "nullable": true
          },
          "IsInvoice": {
            "type": "boolean",
            "description": "Determines if the draft is an actual invoice"
          },
          "CustomerIsLocked": {
            "type": "boolean",
            "description": "Determines if the affected customer is locked"
          }
        },
        "additionalProperties": false
      },
      "InvoiceDraftListDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "ID of the invoice draft",
            "nullable": true
          },
          "RecipientName": {
            "type": "string",
            "description": "Recipients name",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "description": "Determines the date the invoice draft has been created",
            "format": "date-time"
          },
          "Currency": {
            "type": "string",
            "description": "Invoicedrafts currency",
            "nullable": true
          },
          "TotalGross": {
            "type": "number",
            "description": "Total gross amount",
            "format": "double"
          },
          "TotalNet": {
            "type": "number",
            "description": "Total net amount",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double"
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the affected customer",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the affected contract",
            "nullable": true
          },
          "ExternalCustomerId": {
            "type": "string",
            "description": "External ID of the affected customer",
            "nullable": true
          },
          "IsInvoice": {
            "type": "boolean",
            "description": "Determines if the draft is an actual invoice"
          },
          "CustomerIsLocked": {
            "type": "boolean",
            "description": "Determines if the affected customer is locked"
          }
        },
        "additionalProperties": false
      },
      "InvoiceListDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "SentAt": {
            "type": "string",
            "description": "Date where the invoice has been sent to the recipient",
            "format": "date-time"
          },
          "DueDate": {
            "type": "string",
            "description": "Date where the invoice is due",
            "format": "date-time",
            "nullable": true
          },
          "Created": {
            "type": "string",
            "description": "Date where the invoice has been created",
            "format": "date-time"
          },
          "RecipientName": {
            "type": "string",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "ExternalCustomerId": {
            "type": "string",
            "nullable": true
          },
          "DebitorAccount": {
            "type": "string",
            "nullable": true
          },
          "DocumentDate": {
            "type": "string",
            "format": "date",
            "example": "2025-08-23"
          },
          "EInvoicingDispatchStatus": {
            "$ref": "#/components/schemas/EInvoicingDispatchStatus"
          },
          "EInvoicingLastPolledAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoicePreviewDTO": {
        "type": "object",
        "properties": {
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "Entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePreviewEntryDTO"
            },
            "nullable": true
          },
          "RecipientName": {
            "type": "string",
            "nullable": true
          },
          "RecipientSubName": {
            "type": "string",
            "nullable": true
          },
          "RecipientAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "ExternalCustomerId": {
            "type": "string",
            "nullable": true
          },
          "FormattedRecipientAddressLines": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InvoicePreviewEntryDTO": {
        "type": "object",
        "properties": {
          "AmountPayable": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "UsedCredit": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ReverseCharge": {
            "type": "boolean",
            "nullable": true
          },
          "TaxExemptionNotice": {
            "type": "string",
            "nullable": true
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "ItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "nullable": true
          },
          "VatDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatDescriptorDTO"
            },
            "nullable": true
          },
          "PrepaidCardItemList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrepaidCardLineItemReadDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LedgerAmountType": {
        "enum": [
          "TaxableNetAmount",
          "TaxAmount",
          "ReverseChargeNetAmount",
          "GrossAmount"
        ],
        "type": "string"
      },
      "LedgerDunningReadDTO": {
        "type": "object",
        "properties": {
          "Level": {
            "type": "integer",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "Remaining": {
            "type": "number",
            "format": "double"
          },
          "Threshold": {
            "type": "number",
            "format": "double"
          },
          "DocumentId": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "IsAtrigaEscalated": {
            "type": "boolean"
          },
          "AtrigaStatus": {
            "$ref": "#/components/schemas/AtrigaEscalationStatusValue"
          },
          "AtrigaDunningLevel": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LedgerEntryReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/LedgerEntryType"
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "Balance": {
            "type": "number",
            "format": "double"
          },
          "AmountType": {
            "$ref": "#/components/schemas/LedgerAmountType"
          },
          "PaymentTransactionId": {
            "type": "string",
            "nullable": true
          },
          "PaymentTransactionStatus": {
            "$ref": "#/components/schemas/PaymentStatusValue"
          },
          "PaymentStatus": {
            "$ref": "#/components/schemas/PaymentTransactionStatusValue"
          },
          "PaymentRefundId": {
            "type": "string",
            "nullable": true
          },
          "AdjustmentUserId": {
            "type": "string",
            "nullable": true
          },
          "InvoiceId": {
            "type": "string",
            "nullable": true
          },
          "InvoiceDraftId": {
            "type": "string",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "WriteOffId": {
            "type": "string",
            "nullable": true
          },
          "PrepaidCardId": {
            "type": "string",
            "nullable": true
          },
          "ReconciliationTransactionId": {
            "type": "string",
            "nullable": true
          },
          "ReconciliationAssignmentId": {
            "type": "string",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "BookingDate": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "RefundStatus": {
            "$ref": "#/components/schemas/PaymentRefundStatus"
          }
        },
        "additionalProperties": false
      },
      "LedgerEntryType": {
        "enum": [
          "Receivable",
          "Payment",
          "Refund",
          "Adjustment",
          "Chargeback",
          "Cancelation",
          "PrepaidCard",
          "WriteOff",
          "DebtCollection"
        ],
        "type": "string"
      },
      "LineItemDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "ProductNumber": {
            "type": "string",
            "description": "The invoice sender's product number for that item",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "A description which might be quite long and should at least support full plain-text formatting\n(including line breaks). Maybe markdown?",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "The amount of items",
            "format": "double"
          },
          "BookedQuantity": {
            "type": "number",
            "description": "The amount of booked items",
            "format": "double",
            "nullable": true
          },
          "PricePerUnit": {
            "type": "number",
            "description": "The net price, taking allowances into account (compatible to UBL)",
            "format": "double"
          },
          "VatPercentage": {
            "type": "number",
            "description": "The amount of VAT, in percent",
            "format": "double"
          },
          "PeriodStart": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PeriodEnd": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PeriodMultiplier": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ScaleAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Unit": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "string",
            "description": "PlanVariantId or ComponentId",
            "nullable": true
          },
          "TotalNet": {
            "type": "number",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "TaxMarker": {
            "type": "string",
            "nullable": true
          },
          "TaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "ComponentSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "MeteredUsageId": {
            "type": "string",
            "nullable": true
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "ProductDescription": {
            "type": "string",
            "nullable": true
          },
          "DiscountId": {
            "type": "string",
            "nullable": true
          },
          "IsDiscount": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizableStringDecimalNullableListTuple": {
        "type": "object",
        "properties": {
          "Item1": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Item2": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizableStringInt32NullableListTuple": {
        "type": "object",
        "properties": {
          "Item1": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Item2": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocalizableStringInt64NullableListTuple": {
        "type": "object",
        "properties": {
          "Item1": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "Item2": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeteredUsageDTO": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "type": "string",
            "description": "Unique ID.",
            "nullable": true
          },
          "ExternalComponentId": {
            "type": "string",
            "description": "Unique external ID.",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Quantity of the metered usage.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom fields of the metered usage.",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "The point in time to which this usage is to be associated.",
            "format": "date-time"
          },
          "ProductOverride": {
            "$ref": "#/components/schemas/ProductOverrideDTO"
          }
        },
        "additionalProperties": false
      },
      "MeteredUsageReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID.",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract.",
            "nullable": true
          },
          "TransferredAt": {
            "type": "string",
            "description": "Date when the metered usage has been transferred.",
            "format": "date-time"
          },
          "BilledOn": {
            "type": "string",
            "description": "Optional - Date when the metered usage has been billed.",
            "format": "date-time",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "description": "Unique ID.",
            "nullable": true
          },
          "ExternalComponentId": {
            "type": "string",
            "description": "Unique external ID.",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Quantity of the metered usage.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Custom fields of the metered usage.",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "The point in time to which this usage is to be associated.",
            "format": "date-time"
          },
          "ProductOverride": {
            "$ref": "#/components/schemas/ProductOverrideDTO"
          }
        },
        "additionalProperties": false
      },
      "ModifyPriceListItemsDTO": {
        "type": "object",
        "properties": {
          "PriceListItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListItemStandaloneDTO"
            },
            "nullable": true
          },
          "RemovePriceListItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListItemRemovalDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NextRecurringInfosDTO": {
        "type": "object",
        "properties": {
          "BillingDate": {
            "type": "string",
            "description": "Expected next billing date",
            "format": "date-time"
          },
          "TotalNet": {
            "type": "number",
            "description": "Expected next total net amount",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "description": "Expected next total vat amount",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "description": "Expected next total gross amount",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "description": "Expected currency",
            "nullable": true
          },
          "AmountPayable": {
            "type": "number",
            "description": "Expected payable amount",
            "format": "double"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PaymentText": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NextStepAfterContractPeriodEnd": {
        "enum": [
          "RenewAutomatically",
          "EndAfterFirstPeriod",
          "ChangeAfterFirstPeriod"
        ],
        "type": "string"
      },
      "OrderCommitDTO": {
        "type": "object",
        "properties": {
          "PaymentMethod": {
            "type": "string",
            "nullable": true
          },
          "Bearer": {
            "$ref": "#/components/schemas/PSPBearerDTO"
          },
          "RequirePayment": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderDTO": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Determines the start date of the subscription",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Determines the end date of the subscription",
            "format": "date-time",
            "nullable": true
          },
          "BilledUntil": {
            "type": "string",
            "description": "Determines until when the subscription has been paid",
            "format": "date-time",
            "nullable": true
          },
          "ChangeDate": {
            "type": "string",
            "description": "Determines the change date for the up-/downgrade",
            "format": "date-time",
            "nullable": true
          },
          "TriggerInterimBilling": {
            "type": "boolean"
          },
          "EmailTemplateExternalId": {
            "type": "string",
            "description": "Determines the email template which will be used",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the customer",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "ContractDestinationCountry": {
            "type": "string",
            "description": "DestinationCountry for Contract",
            "nullable": true
          },
          "Cart": {
            "$ref": "#/components/schemas/CartDTO"
          },
          "ExternalCart": {
            "$ref": "#/components/schemas/ExternalSubscriptionCartDTO"
          },
          "ExternalSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "Customer": {
            "$ref": "#/components/schemas/CustomerDTO"
          },
          "CustomerChange": {
            "$ref": "#/components/schemas/RawJson"
          },
          "ContractCustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains description of the contract custom fields",
            "nullable": true
          },
          "PreviewAfterTrial": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains description of the order custom fields",
            "nullable": true
          },
          "SalesEntityId": {
            "type": "string",
            "description": "ID of the sales entity",
            "nullable": true
          },
          "BillOnContractStartDate": {
            "type": "boolean",
            "description": "Determines if contract should be billed on start date"
          }
        },
        "additionalProperties": false
      },
      "OrderReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "PlanVariantId": {
            "type": "string",
            "description": "ID of the plan variant",
            "nullable": true
          },
          "PriceListId": {
            "type": "string",
            "description": "ID of the price list",
            "nullable": true
          },
          "PricePhases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PricePhaseDTO"
            },
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the plan",
            "nullable": true
          },
          "AllowWithoutPaymentData": {
            "type": "boolean",
            "description": "Determines if a subscription without payment data is allowed"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            },
            "nullable": true
          },
          "ComponentSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentOrderSelfServiceReadDTO"
            },
            "description": "Contains description of both the available components and the order quantities of the respective\ncomponents plus the line items that explain how the current offer price was calculated",
            "nullable": true
          },
          "DiscountSubscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountSubscriptionReadDTO"
            },
            "description": "Contains description of both the available discounts plus the line items that explain how the current offer price was calculated",
            "nullable": true
          },
          "MeteredUsages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeteredUsageReadDTO"
            },
            "description": "Contains description of both the available metered usages and the order quantities of the respective metered usage plus the line items that explain how the current offer price was calculated",
            "nullable": true
          },
          "MeteredComponents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentOrderSelfServiceReadDTO"
            },
            "description": "Contains a preview of the description of the metered components",
            "nullable": true
          },
          "RatedItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatedItemDTO"
            },
            "description": "Contains description of both the available rated items and the order quantities of the respective rated items plus the line items that explain how the current offer price was calculated",
            "nullable": true
          },
          "Coupon": {
            "$ref": "#/components/schemas/CouponOrderDTO"
          },
          "Contract": {
            "$ref": "#/components/schemas/ContractReadDTO"
          },
          "RecurringFee": {
            "$ref": "#/components/schemas/ComponentOrderSelfServiceReadDTO"
          },
          "SetupFee": {
            "$ref": "#/components/schemas/ComponentOrderSelfServiceReadDTO"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "Total": {
            "type": "number",
            "description": "Total net amount",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "description": "Total gross amount",
            "format": "double"
          },
          "NextTotalGross": {
            "type": "number",
            "description": "Next total gross amount",
            "format": "double"
          },
          "NextTotalGrossDate": {
            "type": "string",
            "description": "Date where NextTotalGross will be calculated",
            "format": "date-time",
            "nullable": true
          },
          "IsTrial": {
            "type": "boolean",
            "description": "Determines if a trial period is active"
          },
          "TrialPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "TrialEndPolicy": {
            "$ref": "#/components/schemas/TrialEndPolicy"
          },
          "Status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "PlanName": {
            "type": "string",
            "description": "Name of the plan",
            "nullable": true
          },
          "PlanVariantName": {
            "type": "string",
            "description": "Name of the plan variant",
            "nullable": true
          },
          "OrderType": {
            "$ref": "#/components/schemas/OrderType"
          },
          "StartDate": {
            "type": "string",
            "description": "Determines the start date of the subscription",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Determines the end date of the subscription",
            "format": "date-time",
            "nullable": true
          },
          "BilledUntil": {
            "type": "string",
            "description": "Determines until when the subscription has been paid",
            "format": "date-time",
            "nullable": true
          },
          "ChangeDate": {
            "type": "string",
            "description": "Determines the change date for the up-/downgrade",
            "format": "date-time",
            "nullable": true
          },
          "TriggerInterimBilling": {
            "type": "boolean"
          },
          "EmailTemplateExternalId": {
            "type": "string",
            "description": "Determines the email template which will be used",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the customer",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "ContractDestinationCountry": {
            "type": "string",
            "description": "DestinationCountry for Contract",
            "nullable": true
          },
          "Cart": {
            "$ref": "#/components/schemas/CartDTO"
          },
          "ExternalCart": {
            "$ref": "#/components/schemas/ExternalSubscriptionCartDTO"
          },
          "ExternalSubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "Customer": {
            "$ref": "#/components/schemas/CustomerDTO"
          },
          "CustomerChange": {
            "$ref": "#/components/schemas/RawJson"
          },
          "ContractCustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains description of the contract custom fields",
            "nullable": true
          },
          "PreviewAfterTrial": {
            "type": "boolean"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Contains description of the order custom fields",
            "nullable": true
          },
          "SalesEntityId": {
            "type": "string",
            "description": "ID of the sales entity",
            "nullable": true
          },
          "BillOnContractStartDate": {
            "type": "boolean",
            "description": "Determines if contract should be billed on start date"
          }
        },
        "additionalProperties": false
      },
      "OrderStatus": {
        "enum": [
          "InProgress",
          "PaymentPending",
          "Aborted",
          "Completed",
          "Failed",
          "Expired",
          "ApprovalPending",
          "Approved",
          "Declined",
          "Incomplete"
        ],
        "type": "string"
      },
      "OrderType": {
        "enum": [
          "Signup",
          "Upgrade"
        ],
        "type": "string"
      },
      "PSPBearerDTO": {
        "type": "object",
        "properties": {
          "Token": {
            "type": "string",
            "description": "PayPal",
            "nullable": true
          },
          "ExpiryMonth": {
            "type": "integer",
            "format": "int32"
          },
          "ExpiryYear": {
            "type": "integer",
            "format": "int32"
          },
          "Holder": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "MandateId": {
            "type": "string",
            "nullable": true
          },
          "PaymentMethodId": {
            "type": "string",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "nullable": true
          },
          "BillingAgreementId": {
            "type": "string",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "nullable": true
          },
          "PseudoCardPan": {
            "type": "string",
            "nullable": true
          },
          "TruncatedCardPan": {
            "type": "string",
            "nullable": true
          },
          "CardType": {
            "type": "string",
            "nullable": true
          },
          "Code": {
            "type": "string",
            "nullable": true
          },
          "Account": {
            "type": "string",
            "nullable": true
          },
          "IBAN": {
            "type": "string",
            "nullable": true
          },
          "BIC": {
            "type": "string",
            "nullable": true
          },
          "MandateReference": {
            "type": "string",
            "nullable": true
          },
          "MandateSignatureDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "MandateText": {
            "type": "string",
            "nullable": true
          },
          "InitialTransactionUniqueId": {
            "type": "string",
            "nullable": true
          },
          "EncryptedPaymentInfo": {
            "type": "string",
            "nullable": true
          },
          "RecurringDetailReference": {
            "type": "string",
            "nullable": true
          },
          "ShopperReference": {
            "type": "string",
            "nullable": true
          },
          "EncryptedCardNumber": {
            "type": "string",
            "nullable": true
          },
          "EncryptedExpiryMonth": {
            "type": "string",
            "nullable": true
          },
          "EncryptedExpiryYear": {
            "type": "string",
            "nullable": true
          },
          "EncryptedSecurityCode": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "EncryptedCard": {
            "type": "string",
            "nullable": true
          },
          "EncryptedCsc": {
            "type": "string",
            "nullable": true
          },
          "AgreementId": {
            "type": "string",
            "nullable": true
          },
          "MigrationBearer": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "DanishIdNumber": {
            "type": "string",
            "nullable": true
          },
          "Issuer": {
            "type": "string",
            "nullable": true
          },
          "BankName": {
            "type": "string",
            "nullable": true
          },
          "NationalIdNumber": {
            "type": "string",
            "nullable": true
          },
          "BirthDate": {
            "type": "string",
            "description": "The birthdate. The date must be between January 1, 1900, and yesterday's date.",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          }
        },
        "additionalProperties": false
      },
      "PaymentErrorCode": {
        "enum": [
          "UnmappedError",
          "LimitExceeded",
          "BearerInvalid",
          "BearerExpired",
          "InvalidCountry",
          "InvalidAmount",
          "InvalidCurrency",
          "LoginError",
          "InvalidData",
          "InsufficientBalance",
          "AlreadyExecuted",
          "InvalidPreconditions",
          "InternalError",
          "InternalProviderError",
          "RateLimit",
          "InvalidConfiguration",
          "PermissionDenied",
          "Canceled",
          "Rejected",
          "PSPConnectionProblem",
          "InvalidBic",
          "InvalidIBAN",
          "PSPConnectionTimeout",
          "InvalidNationalIdNumber",
          "FailedCustomerUpdate",
          "RejectedInternally",
          "InvalidAgreement",
          "SecretInvalidOrExpired",
          "FactoringRejected"
        ],
        "type": "string"
      },
      "PaymentPeriodMode": {
        "enum": [
          "PrePaid",
          "PostPaid",
          "PrePaidBilledUntil"
        ],
        "type": "string"
      },
      "PaymentPreferredAssignmentReadDTO": {
        "type": "object",
        "properties": {
          "Target": {
            "type": "string",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "TargetDescription": {
            "type": "string",
            "nullable": true
          },
          "TargetType": {
            "$ref": "#/components/schemas/LedgerEntryType"
          },
          "TargetItemId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentProcessDTO": {
        "type": "object",
        "properties": {
          "Succeeded": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PaymentProvider": {
        "enum": [
          "External",
          "DirectDebit",
          "PayPal",
          "Paymill",
          "FakeProvider",
          "InvoicePayment",
          "PayOne",
          "None",
          "Wirecard",
          "Unzer",
          "Adyen",
          "Stripe",
          "GoCardless",
          "SlimPay",
          "WirecardElastic",
          "Worldline",
          "Worldpay",
          "ThirdPartyIntegration",
          "MobilePay",
          "NetsEasy",
          "PayEx",
          "SepaXml",
          "PayExInvoiceService",
          "FarPay",
          "Mollie",
          "AmazonPay",
          "Reepay",
          "SwanOnAccount",
          "StripeV2",
          "Riverty",
          "UnzerV2",
          "Heidelpay"
        ],
        "type": "string"
      },
      "PaymentProviderRole": {
        "enum": [
          "Default",
          "BlackLabel",
          "CreditCard",
          "Debit",
          "None",
          "OnAccount",
          "Betalingsservice",
          "iDEAL",
          "Autogiro",
          "Avtalegiro",
          "ApplePay",
          "VippsMobilePay",
          "PayPal",
          "AfterPay",
          "TWINT"
        ],
        "type": "string"
      },
      "PaymentRefundDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "PaymentTransactionId": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/PaymentRefundStatus"
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "ErrorDetails": {
            "type": "string",
            "nullable": true
          },
          "TimeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "PreferredAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPreferredAssignmentReadDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentRefundStatus": {
        "enum": [
          "Succeeded",
          "Failed"
        ],
        "type": "string"
      },
      "PaymentStatusValue": {
        "enum": [
          "Created",
          "InProgress",
          "Prepared",
          "PreliminarySucceeded",
          "Succeeded",
          "Undefined",
          "Canceled",
          "Chargeback",
          "Pending",
          "Failed",
          "Unmapped",
          "Refunded",
          "ThreeDSecurePending",
          "PartiallyRefunded",
          "PartialChargeback",
          "InDispute",
          "Finalizing",
          "Scheduled",
          "PartiallyPaid",
          "SuccessfullyImported",
          "OverPaid",
          "RedirectUrlPrepared",
          "InCollection",
          "DebtCollectionFailed",
          "InCollectionPartialPaid"
        ],
        "type": "string"
      },
      "PaymentTransactionReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentProvider": {
            "$ref": "#/components/schemas/PaymentProvider"
          },
          "PaymentProviderRole": {
            "$ref": "#/components/schemas/PaymentProviderRole"
          },
          "Trigger": {
            "$ref": "#/components/schemas/PaymentTrigger"
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "Contract": {
            "type": "string",
            "nullable": true
          },
          "OrderId": {
            "type": "string",
            "nullable": true
          },
          "ProviderPaymentToken": {
            "type": "string",
            "nullable": true
          },
          "ProviderTransactionId": {
            "type": "string",
            "nullable": true
          },
          "StatusHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTransactionStatusDTO"
            },
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/PaymentTransactionStatusDTO"
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "StatusTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "ConfirmedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ConfirmedAtStatus": {
            "type": "string",
            "nullable": true
          },
          "PreauthStatus": {
            "$ref": "#/components/schemas/PreauthTransactionStatus"
          },
          "Preauth": {
            "type": "boolean",
            "readOnly": true
          },
          "PreferredAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPreferredAssignmentReadDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionStatusDTO": {
        "type": "object",
        "properties": {
          "Status": {
            "$ref": "#/components/schemas/PaymentStatusValue"
          },
          "Timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "Amount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ErrorCode": {
            "$ref": "#/components/schemas/PaymentErrorCode"
          },
          "ProviderErrorCode": {
            "type": "string",
            "nullable": true
          },
          "ProviderMessage": {
            "type": "string",
            "nullable": true
          },
          "StatusResponse": {
            "type": "string",
            "nullable": true
          },
          "HttpCode": {
            "type": "integer",
            "format": "int32"
          },
          "Preauth": {
            "type": "boolean"
          },
          "HandlingFee": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionStatusValue": {
        "enum": [
          "Confirmed",
          "Unconfirmed"
        ],
        "type": "string"
      },
      "PaymentTransactionWithInvoiceIdDTO": {
        "type": "object",
        "properties": {
          "InvoiceReferenceCode": {
            "type": "string",
            "nullable": true
          },
          "InvoiceId": {
            "type": "string",
            "nullable": true
          },
          "InvoiceDraftId": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time"
          },
          "PaymentProvider": {
            "$ref": "#/components/schemas/PaymentProvider"
          },
          "PaymentProviderRole": {
            "$ref": "#/components/schemas/PaymentProviderRole"
          },
          "Trigger": {
            "$ref": "#/components/schemas/PaymentTrigger"
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "Contract": {
            "type": "string",
            "nullable": true
          },
          "OrderId": {
            "type": "string",
            "nullable": true
          },
          "ProviderPaymentToken": {
            "type": "string",
            "nullable": true
          },
          "ProviderTransactionId": {
            "type": "string",
            "nullable": true
          },
          "StatusHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTransactionStatusDTO"
            },
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/PaymentTransactionStatusDTO"
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "StatusTimestamp": {
            "type": "string",
            "format": "date-time"
          },
          "ConfirmedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "ConfirmedAtStatus": {
            "type": "string",
            "nullable": true
          },
          "PreauthStatus": {
            "$ref": "#/components/schemas/PreauthTransactionStatus"
          },
          "Preauth": {
            "type": "boolean",
            "readOnly": true
          },
          "PreferredAssignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPreferredAssignmentReadDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTrigger": {
        "enum": [
          "Unspecified",
          "Signup",
          "ContractActivation",
          "Recurring",
          "PaymentChange",
          "Upgrade"
        ],
        "type": "string"
      },
      "PdfDocumentFormat": {
        "enum": [
          "NoEInvoiceAttachment",
          "ZugFerd1Comfort",
          "ZugFerd2Comfort",
          "ZugFerd2XRechnung"
        ],
        "type": "string"
      },
      "PeriodDTO": {
        "type": "object",
        "properties": {
          "Unit": {
            "$ref": "#/components/schemas/PeriodUnit"
          },
          "Quantity": {
            "maximum": 9999,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PeriodUnit": {
        "enum": [
          "Day",
          "Week",
          "Month",
          "Year",
          "Hour",
          "Minute",
          "Second"
        ],
        "type": "string"
      },
      "PlanDTO": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized name",
            "nullable": true
          },
          "SetupDescription": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized description of the setup",
            "nullable": true
          },
          "PlanDescription": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized description of the plan",
            "nullable": true
          },
          "TrialPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "TrialEndNotificationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "TrialEndPolicy": {
            "$ref": "#/components/schemas/TrialEndPolicy"
          },
          "TaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "SetupTaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "FallbackPlanVariantId": {
            "type": "string",
            "description": "ID of the planvariant after the trial ",
            "nullable": true
          },
          "RequiresOrderApproval": {
            "type": "boolean",
            "description": "Determines if the plan requires order approval"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanGroupDTO": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized names of the plangroup",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "TimeGranularity": {
            "$ref": "#/components/schemas/TimeGranularity"
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "SalesEntityId": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the plan group has been hidden in the UI"
          },
          "DefaultPriceListId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanGroupKPIDTO": {
        "type": "object",
        "properties": {
          "XAxisValues": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "TotalNumberOfContractsStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringInt64NullableListTuple"
            },
            "description": "Each tuple contains a name and its axis Y values.",
            "nullable": true
          },
          "PayingContractsStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringInt32NullableListTuple"
            },
            "nullable": true
          },
          "SubscriptionsStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringInt64NullableListTuple"
            },
            "nullable": true
          },
          "UnsubscriptionsStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringInt64NullableListTuple"
            },
            "nullable": true
          },
          "MonthlyRecurringRevenueStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringDecimalNullableListTuple"
            },
            "nullable": true
          },
          "BilledTurnOverStats": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalizableStringDecimalNullableListTuple"
            },
            "nullable": true
          },
          "NoData": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PlanGroupReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized names of the plangroup",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "TimeGranularity": {
            "$ref": "#/components/schemas/TimeGranularity"
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "SalesEntityId": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the plan group has been hidden in the UI"
          },
          "DefaultPriceListId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanReadDTO": {
        "type": "object",
        "properties": {
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the plan group",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "Name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized name",
            "nullable": true
          },
          "SetupDescription": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized description of the setup",
            "nullable": true
          },
          "PlanDescription": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized description of the plan",
            "nullable": true
          },
          "TrialPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "TrialEndNotificationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "TrialEndPolicy": {
            "$ref": "#/components/schemas/TrialEndPolicy"
          },
          "TaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "SetupTaxPolicyId": {
            "type": "string",
            "nullable": true
          },
          "FallbackPlanVariantId": {
            "type": "string",
            "description": "ID of the planvariant after the trial ",
            "nullable": true
          },
          "RequiresOrderApproval": {
            "type": "boolean",
            "description": "Determines if the plan requires order approval"
          },
          "CustomFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanVariantCreateDTO": {
        "type": "object",
        "properties": {
          "AllowSelfService": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered via selfservice"
          },
          "AllowWithoutPaymentData": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered without payment data"
          },
          "ContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "CancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterCancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "BillingPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the plan group",
            "nullable": true
          },
          "PaymentPeriodMode": {
            "$ref": "#/components/schemas/PaymentPeriodMode"
          },
          "Quota": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreeQuotaDescriptorDTO"
            },
            "nullable": true
          },
          "NextPlanVariantId": {
            "type": "string",
            "description": "The planvariant after the first period",
            "nullable": true
          },
          "NextPlanId": {
            "type": "string",
            "description": "The plan after the first period",
            "nullable": true
          },
          "RecurringFee": {
            "type": "number",
            "description": "Amount of the recurring fee",
            "format": "double",
            "nullable": true
          },
          "SetupFee": {
            "type": "number",
            "description": "Amount of the setup fee",
            "format": "double",
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized descriptions of the planvariant",
            "nullable": true
          },
          "BillingDateAlignment": {
            "$ref": "#/components/schemas/BillingDateAlignment"
          },
          "BillingDay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the plan has been hidden in the UI"
          },
          "AfterFirstContractPeriodNextStep": {
            "$ref": "#/components/schemas/NextStepAfterContractPeriodEnd"
          },
          "ExternalBillingProductId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanVariantDTO": {
        "type": "object",
        "properties": {
          "AllowSelfService": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered via selfservice"
          },
          "AllowWithoutPaymentData": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered without payment data"
          },
          "ContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "CancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterCancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "BillingPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the plan group",
            "nullable": true
          },
          "PaymentPeriodMode": {
            "$ref": "#/components/schemas/PaymentPeriodMode"
          },
          "Quota": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreeQuotaDescriptorDTO"
            },
            "nullable": true
          },
          "NextPlanVariantId": {
            "type": "string",
            "description": "The planvariant after the first period",
            "nullable": true
          },
          "NextPlanId": {
            "type": "string",
            "description": "The plan after the first period",
            "nullable": true
          },
          "RecurringFee": {
            "type": "number",
            "description": "Amount of the recurring fee",
            "format": "double",
            "nullable": true
          },
          "SetupFee": {
            "type": "number",
            "description": "Amount of the setup fee",
            "format": "double",
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized descriptions of the planvariant",
            "nullable": true
          },
          "BillingDateAlignment": {
            "$ref": "#/components/schemas/BillingDateAlignment"
          },
          "BillingDay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the plan has been hidden in the UI"
          },
          "AfterFirstContractPeriodNextStep": {
            "$ref": "#/components/schemas/NextStepAfterContractPeriodEnd"
          },
          "ExternalBillingProductId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlanVariantReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the plan",
            "nullable": true
          },
          "EndAfterFirstContractPeriod": {
            "type": "boolean",
            "description": "Determines if the contract ends after the first period"
          },
          "RecurringPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          },
          "OneOffPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          },
          "AllowSelfService": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered via selfservice"
          },
          "AllowWithoutPaymentData": {
            "type": "boolean",
            "description": "Determines if the planvariant can be ordered without payment data"
          },
          "ContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterContractPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "CancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "LaterCancellationPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "BillingPeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "FeePeriod": {
            "$ref": "#/components/schemas/PeriodDTO"
          },
          "PlanGroupId": {
            "type": "string",
            "description": "ID of the plan group",
            "nullable": true
          },
          "PaymentPeriodMode": {
            "$ref": "#/components/schemas/PaymentPeriodMode"
          },
          "Quota": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreeQuotaDescriptorDTO"
            },
            "nullable": true
          },
          "NextPlanVariantId": {
            "type": "string",
            "description": "The planvariant after the first period",
            "nullable": true
          },
          "NextPlanId": {
            "type": "string",
            "description": "The plan after the first period",
            "nullable": true
          },
          "RecurringFee": {
            "type": "number",
            "description": "Amount of the recurring fee",
            "format": "double",
            "nullable": true
          },
          "SetupFee": {
            "type": "number",
            "description": "Amount of the setup fee",
            "format": "double",
            "nullable": true
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized descriptions of the planvariant",
            "nullable": true
          },
          "BillingDateAlignment": {
            "$ref": "#/components/schemas/BillingDateAlignment"
          },
          "BillingDay": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the plan has been hidden in the UI"
          },
          "AfterFirstContractPeriodNextStep": {
            "$ref": "#/components/schemas/NextStepAfterContractPeriodEnd"
          },
          "ExternalBillingProductId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostingDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "SequentialId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "format": "double"
          },
          "TaxKind": {
            "$ref": "#/components/schemas/TaxKind"
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "AssignedDocumentNumber": {
            "type": "string",
            "nullable": true
          },
          "EndPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostingEndPointDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostingEndPointDTO": {
        "type": "object",
        "properties": {
          "Account": {
            "type": "string",
            "nullable": true
          },
          "AccountKind": {
            "$ref": "#/components/schemas/AccountKind"
          },
          "TaxCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostingGroupDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "SequentialId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostingDTO"
            },
            "nullable": true
          },
          "PostingKind": {
            "$ref": "#/components/schemas/PostingKind"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PostingDate": {
            "type": "string",
            "format": "date",
            "example": "2025-08-23"
          },
          "IdealPostingDate": {
            "type": "string",
            "format": "date",
            "example": "2025-08-23"
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "nullable": true
          },
          "ReversesId": {
            "type": "string",
            "nullable": true
          },
          "Text": {
            "type": "string",
            "nullable": true
          },
          "IsCorrection": {
            "type": "boolean"
          },
          "InvoiceId": {
            "type": "string",
            "nullable": true
          },
          "DocumentNumber": {
            "type": "string",
            "nullable": true
          },
          "VatId": {
            "type": "string",
            "nullable": true
          },
          "LedgerEntryId": {
            "type": "string",
            "nullable": true
          },
          "PaymentTransactionId": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/PostingStatus"
          }
        },
        "additionalProperties": false
      },
      "PostingKind": {
        "enum": [
          "Revenue",
          "Deferral",
          "ResolveDeferral",
          "Payment",
          "PrepaidCard",
          "Assignment",
          "WriteOff"
        ],
        "type": "string"
      },
      "PostingStatus": {
        "enum": [
          "Draft",
          "Exported",
          "Deleted",
          "Reversed"
        ],
        "type": "string"
      },
      "PreauthTransactionStatus": {
        "enum": [
          "Undefined",
          "ToBePaid",
          "Paid",
          "PaymentFailed",
          "ToBeCancelled",
          "Cancelled",
          "CancelFailed",
          "ToBeCancelledAutomatically",
          "Scheduled",
          "NoCancellationRequired"
        ],
        "type": "string"
      },
      "PredefinedTaxDefinition": {
        "enum": [
          "Vat",
          "TaxFreeExport",
          "ReverseCharge",
          "ChargebackFee",
          "IntraGroup",
          "IntraEuSupply",
          "MultiPurposePrepaidCard",
          "VatZero",
          "AvaTax"
        ],
        "type": "string"
      },
      "PredefinedTaxPolicy": {
        "enum": [
          "Services",
          "ChargebackFee"
        ],
        "type": "string"
      },
      "PrepaidCardLineItemReadDTO": {
        "type": "object",
        "properties": {
          "VatPercentage": {
            "type": "number",
            "format": "double"
          },
          "Country": {
            "type": "string",
            "nullable": true
          },
          "PrepaidCardSerialNumber": {
            "type": "string",
            "nullable": true
          },
          "PrepaidCardId": {
            "type": "string",
            "nullable": true
          },
          "TotalVat": {
            "type": "number",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "format": "double"
          },
          "TaxDefinitionLabel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrepaidCardProvider": {
        "enum": [
          "None",
          "Epay"
        ],
        "type": "string"
      },
      "PrepaidCardReadDto": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "nullable": true
          },
          "SerialNumber": {
            "type": "string",
            "nullable": true
          },
          "Ean": {
            "type": "string",
            "nullable": true
          },
          "ExpiryDate": {
            "type": "string",
            "format": "date",
            "example": "2025-08-23"
          },
          "Provider": {
            "$ref": "#/components/schemas/PrepaidCardProvider"
          },
          "RedemptionTime": {
            "type": "string",
            "format": "date-time"
          },
          "AmountTotal": {
            "type": "number",
            "format": "double"
          },
          "AmountUsed": {
            "type": "number",
            "format": "double"
          },
          "AmountRemaining": {
            "type": "number",
            "format": "double"
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/PrepaidCardStatus"
          },
          "MaskedSecretCode": {
            "type": "string",
            "nullable": true
          },
          "TaxCountry": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrepaidCardRedemptionDto": {
        "required": [
          "ContractId",
          "SecretCode"
        ],
        "type": "object",
        "properties": {
          "ContractId": {
            "minLength": 1,
            "type": "string"
          },
          "SecretCode": {
            "minLength": 1,
            "type": "string"
          },
          "Provider": {
            "$ref": "#/components/schemas/PrepaidCardProvider"
          }
        },
        "additionalProperties": false
      },
      "PrepaidCardStatus": {
        "enum": [
          "None",
          "NotActivated",
          "Activated",
          "Deactivated",
          "Redeemed"
        ],
        "type": "string"
      },
      "PrepaidCardsListReadDto": {
        "type": "object",
        "properties": {
          "PrepaidCardsAmountRemaining": {
            "type": "number",
            "format": "double"
          },
          "PrepaidCards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrepaidCardReadDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceDTO": {
        "type": "object",
        "properties": {
          "PriceScale": {
            "$ref": "#/components/schemas/PriceScaleDTO"
          },
          "DiscountScale": {
            "$ref": "#/components/schemas/DiscountScaleDTO"
          },
          "PricePerUnit": {
            "type": "number",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceListDTO": {
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized names of the price list",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "TimeGranularity": {
            "$ref": "#/components/schemas/TimeGranularity"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListItemDTO"
            },
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "nullable": true
          },
          "ParentPriceListId": {
            "type": "string",
            "nullable": true
          },
          "ParentPriceListName": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PriceListItemDTO": {
        "type": "object",
        "properties": {
          "ProductId": {
            "type": "string",
            "nullable": true
          },
          "OneOffPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          },
          "RecurringPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          }
        },
        "additionalProperties": false
      },
      "PriceListItemRemovalDTO": {
        "type": "object",
        "properties": {
          "PriceListId": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceListItemStandaloneDTO": {
        "type": "object",
        "properties": {
          "PriceListId": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "string",
            "nullable": true
          },
          "OneOffPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          },
          "RecurringPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          }
        },
        "additionalProperties": false
      },
      "PriceListItemStandaloneReadDTO": {
        "type": "object",
        "properties": {
          "ParentPriceListId": {
            "type": "string",
            "nullable": true
          },
          "PriceListId": {
            "type": "string",
            "nullable": true
          },
          "ProductId": {
            "type": "string",
            "nullable": true
          },
          "OneOffPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          },
          "RecurringPrice": {
            "$ref": "#/components/schemas/PriceDTO"
          }
        },
        "additionalProperties": false
      },
      "PriceListReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID",
            "nullable": true
          },
          "ProductsAssigned": {
            "type": "boolean"
          },
          "InternalName": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Localized names of the price list",
            "nullable": true
          },
          "ExternalId": {
            "type": "string",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PriceTaxType": {
            "$ref": "#/components/schemas/PriceTaxType"
          },
          "TimeGranularity": {
            "$ref": "#/components/schemas/TimeGranularity"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListItemDTO"
            },
            "nullable": true
          },
          "PlanGroupId": {
            "type": "string",
            "nullable": true
          },
          "ParentPriceListId": {
            "type": "string",
            "nullable": true
          },
          "ParentPriceListName": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PricePhaseDTO": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "format": "date-time"
          },
          "PriceListId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceScaleDTO": {
        "type": "object",
        "properties": {
          "IsCumulative": {
            "type": "boolean"
          },
          "Items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceScaleItemDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PriceScaleItemDTO": {
        "type": "object",
        "properties": {
          "IsBucketPrice": {
            "type": "boolean"
          },
          "From": {
            "type": "number",
            "format": "double"
          },
          "Value": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PriceTaxType": {
        "enum": [
          "Net",
          "Gross"
        ],
        "type": "string"
      },
      "PrimaryTaxCategory": {
        "enum": [
          "Vat",
          "Untaxed",
          "ReverseCharge",
          "Special",
          "ExternalTaxCalculation"
        ],
        "type": "string"
      },
      "ProductInfoDTO": {
        "type": "object",
        "properties": {
          "SelfServiceUrl": {
            "type": "string",
            "nullable": true
          },
          "PlanGroups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanGroupReadDTO"
            },
            "nullable": true
          },
          "Plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanReadDTO"
            },
            "nullable": true
          },
          "PlanVariants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlanVariantReadDTO"
            },
            "nullable": true
          },
          "Components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentReadDTO"
            },
            "nullable": true
          },
          "TaxPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxPolicyReadDTO"
            },
            "nullable": true
          },
          "Discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountReadDTO"
            },
            "nullable": true
          },
          "Coupons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CouponReadDTO"
            },
            "nullable": true
          },
          "TaxDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDefinitionReadDTO"
            },
            "nullable": true
          },
          "PriceLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceListReadDTO"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProductOverrideDTO": {
        "type": "object",
        "properties": {
          "PricePerUnit": {
            "type": "number",
            "description": "Optional - New price of the product",
            "format": "double",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Optional - Change the name of your product",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Optional - Change the description of your product",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RatedItemCreateDTO": {
        "required": [
          "Description",
          "TaxPolicyId"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the rated item"
          },
          "Quantity": {
            "type": "number",
            "description": "Quantity of the rated item",
            "format": "double"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "Per unit price of the rated item",
            "format": "double"
          },
          "TaxPolicyId": {
            "minLength": 1,
            "type": "string",
            "description": "ID of the tax policy"
          },
          "PeriodStart": {
            "type": "string",
            "description": "Optional - Date where the period should start. Leave empty to start immediately",
            "format": "date-time",
            "nullable": true
          },
          "PeriodEnd": {
            "type": "string",
            "description": "Optional - Date where the period should end. Leave empty to end never",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RatedItemDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique ID of the rated item",
            "nullable": true
          },
          "LineItemId": {
            "type": "string",
            "description": "ID of the line item",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the rated item",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Quantity of the rated item",
            "format": "double"
          },
          "PricePerUnit": {
            "type": "number",
            "description": "Per unit price of the rated item",
            "format": "double"
          },
          "TaxPolicyId": {
            "type": "string",
            "description": "ID of the tax policy",
            "nullable": true
          },
          "PeriodStart": {
            "type": "string",
            "description": "Date where the period starts",
            "format": "date-time"
          },
          "PeriodEnd": {
            "type": "string",
            "description": "Date where the period ends",
            "format": "date-time"
          },
          "TransferredAt": {
            "type": "string",
            "description": "Date when the rated item has been transferred",
            "format": "date-time"
          },
          "TotalNet": {
            "type": "number",
            "description": "Total net amount",
            "format": "double"
          },
          "TotalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double"
          },
          "TotalGross": {
            "type": "number",
            "description": "Total gross amount",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "RawJson": {
        "type": "object",
        "properties": {
          "Raw": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ReportDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "ReportType": {
            "$ref": "#/components/schemas/ReportType"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Parameters": {
            "$ref": "#/components/schemas/ReportingParametersDTO"
          },
          "Status": {
            "$ref": "#/components/schemas/ReportStatus"
          },
          "ErrorMessage": {
            "type": "string",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "QueuedInPosition": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReportFormat": {
        "enum": [
          "Csv",
          "Json",
          "JsonLines"
        ],
        "type": "string"
      },
      "ReportStatus": {
        "enum": [
          "Queued",
          "InProgress",
          "Finished",
          "Failed"
        ],
        "type": "string"
      },
      "ReportType": {
        "enum": [
          "ActiveProducts",
          "PaymentOverview",
          "DunningOverview",
          "Turnover",
          "Contracts",
          "ContractsFiltered",
          "ComponentSubscriptions",
          "DiscountSubscriptions",
          "TurnoverForecast",
          "AggregateAccounting",
          "DebtorBalance",
          "OpenItems",
          "OpenItemsReceivables",
          "OpenItemsPayables",
          "DeferredInvoices",
          "AggregateContractPhaseChange",
          "ContractPhaseChange",
          "Ageing",
          "ContractChurn",
          "MossExtended",
          "MossElster",
          "GoogleIapReceipts",
          "TaxCorrection",
          "ContractPhaseChangeLexware",
          "ContractNetTurnover",
          "PaymentOverviewExtended",
          "Orders",
          "ProductMonthsBilled",
          "ProductMonthsBilledWithOpenItems",
          "ProductMonthsBilledByFeePeriod",
          "MassWriteOffPreview",
          "MassWriteOffExecution",
          "AssignmentOverview",
          "OssElster",
          "Cancellations",
          "LineItems",
          "ContractPauses",
          "Invoices",
          "MonthlyRecurringRevenue",
          "BulkUpdatePreview",
          "BulkUpdateExecution",
          "TransactionsFiltered",
          "TrustedShopsTurnover",
          "AmazonIapReceipts",
          "AppleIapReceipts",
          "ExaringAccountingPdf",
          "HaufelexwareAccountingPdf",
          "RtlFastStats",
          "PayOneReconByMonth",
          "PayOneReconByFile",
          "RtlManualUserActions",
          "EweInvoices",
          "ExaringIfrs15Pdf",
          "ExaringIfrs15Csv"
        ],
        "type": "string"
      },
      "ReportingParametersDTO": {
        "type": "object",
        "properties": {
          "DateRange": {
            "$ref": "#/components/schemas/DateRangeDTO"
          },
          "Year": {
            "maximum": 2100,
            "minimum": 2000,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Month": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomYearFrom": {
            "maximum": 2100,
            "minimum": 2000,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomMonthFrom": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomDayFrom": {
            "maximum": 31,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomYearTo": {
            "maximum": 2100,
            "minimum": 2000,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomMonthTo": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "CustomDayTo": {
            "maximum": 31,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "Format": {
            "$ref": "#/components/schemas/ReportFormat"
          },
          "Locale": {
            "type": "string",
            "nullable": true
          },
          "GroupBy": {
            "type": "string",
            "nullable": true
          },
          "PSPReportId": {
            "type": "string",
            "nullable": true
          },
          "MassWriteOffId": {
            "type": "string",
            "nullable": true
          },
          "BulkOperationId": {
            "type": "string",
            "nullable": true
          },
          "SendEmailAfterFinish": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RevenueAccountType": {
        "enum": [
          "TaxBased",
          "ProductBased"
        ],
        "type": "string"
      },
      "SelfServiceTokenDTO": {
        "type": "object",
        "properties": {
          "Expiry": {
            "type": "string",
            "description": "Date when the token will expire",
            "format": "date-time"
          },
          "Token": {
            "type": "string",
            "nullable": true
          },
          "Purpose": {
            "type": "string",
            "description": "The purpose of the token, currently hardcoded \"CustomerPortal\"",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "URL to the selfservice portal, redirect your customer to this URL",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SetTrialEndDTO": {
        "type": "object",
        "properties": {
          "TrialEndDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SubscriptionReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CustomerId": {
            "type": "string",
            "description": "ID of the customer",
            "nullable": true
          },
          "ExternalCustomerId": {
            "type": "string",
            "description": "External ID of the customer",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "Customers first name",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Customers last name",
            "nullable": true
          },
          "EmailAddress": {
            "type": "string",
            "description": "Customers email address",
            "nullable": true
          },
          "CustomerName": {
            "type": "string",
            "nullable": true
          },
          "CustomerSubName": {
            "type": "string",
            "nullable": true
          },
          "Hidden": {
            "type": "boolean",
            "description": "Determines if the customer is hidden"
          },
          "IsLocked": {
            "type": "boolean",
            "description": "Determines if the customer is locked"
          },
          "CustomerDeletionRequestedAt": {
            "type": "string",
            "description": "Customer deletion requested at",
            "format": "date-time",
            "nullable": true
          },
          "ContractId": {
            "type": "string",
            "description": "ID of the contract",
            "nullable": true
          },
          "ReferenceCode": {
            "type": "string",
            "description": "Referencecode of the contract",
            "nullable": true
          },
          "LastBillingDate": {
            "type": "string",
            "description": "Optional - Date where the contract has been billed for the last time",
            "format": "date-time",
            "nullable": true
          },
          "NextBillingDate": {
            "type": "string",
            "description": "Optional - Date where the contract will billed",
            "format": "date-time",
            "nullable": true
          },
          "PlanId": {
            "type": "string",
            "description": "ID of the plan",
            "nullable": true
          },
          "PlanVariantId": {
            "type": "string",
            "description": "ID of the planvariant",
            "nullable": true
          },
          "PlanVariantName": {
            "type": "string",
            "description": "Name of the planvariant",
            "nullable": true
          },
          "PlanName": {
            "type": "string",
            "description": "Name of the plan",
            "nullable": true
          },
          "LastPhaseChange": {
            "type": "string",
            "description": "Optional - Date where the last phasechange has happened",
            "format": "date-time",
            "nullable": true
          },
          "Balance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "Currency": {
            "type": "string",
            "nullable": true
          },
          "PaymentProvider": {
            "$ref": "#/components/schemas/PaymentProvider"
          },
          "PaymentProviderRole": {
            "$ref": "#/components/schemas/PaymentProviderRole"
          },
          "InitialPaymentProviderRole": {
            "$ref": "#/components/schemas/PaymentProviderRole"
          },
          "RecurringPaymentsPaused": {
            "type": "boolean",
            "description": "Optional - Determines if the reccuring payments have been paused",
            "nullable": true
          },
          "BillingSuspended": {
            "type": "boolean",
            "description": "Optional - Determines if the billing have been paused",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "description": "Optional - Date where the contract starts",
            "format": "date-time",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "Optional - Date where the contract ends",
            "format": "date-time",
            "nullable": true
          },
          "ContractDeletionRequestedAt": {
            "type": "string",
            "description": "Contract deletion requested at",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionStatus": {
        "enum": [
          "Active",
          "Inactive",
          "Ended"
        ],
        "type": "string"
      },
      "TaxCategoryCode": {
        "enum": [
          "S",
          "Z",
          "AE",
          "K",
          "G",
          "E"
        ],
        "type": "string",
        "description": "Code identifying a tax/duty/fee category within a tax/duty/fee type system.\n(Subset of <a href=\"https://service.unece.org/trade/untdid/d97a/uncl/uncl5305.htm\">UNCL5305</a> )"
      },
      "TaxDefinitionReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Predefined": {
            "$ref": "#/components/schemas/PredefinedTaxDefinition"
          },
          "PrimaryCategory": {
            "$ref": "#/components/schemas/PrimaryTaxCategory"
          },
          "InternalName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "CategoryCode": {
            "$ref": "#/components/schemas/TaxCategoryCode"
          }
        },
        "additionalProperties": false
      },
      "TaxKind": {
        "enum": [
          "Net",
          "Gross",
          "Vat"
        ],
        "type": "string"
      },
      "TaxPolicyEntryDTO": {
        "required": [
          "Country",
          "TaxDefinitionId"
        ],
        "type": "object",
        "properties": {
          "Country": {
            "minLength": 1,
            "type": "string"
          },
          "ValidFrom": {
            "type": "string",
            "format": "date",
            "nullable": true,
            "example": "2025-08-23"
          },
          "Rate": {
            "type": "number",
            "format": "double"
          },
          "TaxDefinitionId": {
            "minLength": 1,
            "type": "string"
          },
          "SplitOnTaxChange": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TaxPolicyReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Predefined": {
            "$ref": "#/components/schemas/PredefinedTaxPolicy"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ProductTaxCode": {
            "type": "string",
            "nullable": true
          },
          "IsOssApplicable": {
            "type": "boolean"
          },
          "Entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxPolicyEntryDTO"
            },
            "nullable": true
          },
          "ReverseChargeTaxDefinitionId": {
            "type": "string",
            "nullable": true
          },
          "ReverseChargeCountryBlacklist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeGranularity": {
        "enum": [
          "Precise",
          "Day"
        ],
        "type": "string"
      },
      "TrialEndPolicy": {
        "enum": [
          "NoTrial",
          "DeactivateAccount",
          "RequestPayment",
          "ActivateFallbackPlanVariant"
        ],
        "type": "string"
      },
      "TrialMode": {
        "enum": [
          "Disabled",
          "Enabled",
          "ReplaceRemainder"
        ],
        "type": "string"
      },
      "VatDescriptorDTO": {
        "type": "object",
        "properties": {
          "VatPercentage": {
            "type": "number",
            "description": "Applied vat percentage",
            "format": "double"
          },
          "BaseAmount": {
            "type": "number",
            "description": "Total base amount",
            "format": "double"
          },
          "TaxAmount": {
            "type": "number",
            "description": "Total tax amount",
            "format": "double"
          },
          "Marker": {
            "type": "integer",
            "description": "Marker number",
            "format": "int32"
          },
          "MarkerText": {
            "type": "string",
            "description": "Marker",
            "nullable": true
          },
          "Label": {
            "type": "string",
            "description": "Marker label",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VatIdValidationStatus": {
        "enum": [
          "Unconfirmed",
          "Invalid",
          "Confirmed",
          "Skipped"
        ],
        "type": "string"
      },
      "WebhookDispatchReadDTO": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "TargetUrl": {
            "type": "string",
            "nullable": true
          },
          "Event": {
            "$ref": "#/components/schemas/HookEvent"
          },
          "IncludeBillwerkAuth": {
            "type": "boolean"
          },
          "Status": {
            "type": "string",
            "nullable": true
          },
          "AttemptCount": {
            "type": "integer",
            "format": "int32"
          },
          "NextAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "LastAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "Data": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookDispatchStatus": {
        "enum": [
          "New",
          "Requeued",
          "Succeeded",
          "Failed",
          "FinallyFailed"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "apiKey",
        "description": "Fill in your acquired bearer token here, must be like 'Bearer TOKEN_HERE'",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "BearerAuth": [ ]
    }
  ]
}